// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newProjectTaskVisibilityUser(db *gorm.DB, opts ...gen.DOOption) projectTaskVisibilityUser {
	_projectTaskVisibilityUser := projectTaskVisibilityUser{}

	_projectTaskVisibilityUser.projectTaskVisibilityUserDo.UseDB(db, opts...)
	_projectTaskVisibilityUser.projectTaskVisibilityUserDo.UseModel(&model.ProjectTaskVisibilityUser{})

	tableName := _projectTaskVisibilityUser.projectTaskVisibilityUserDo.TableName()
	_projectTaskVisibilityUser.ALL = field.NewAsterisk(tableName)
	_projectTaskVisibilityUser.ID = field.NewInt64(tableName, "id")
	_projectTaskVisibilityUser.ProjectID = field.NewInt64(tableName, "project_id")
	_projectTaskVisibilityUser.TaskID = field.NewInt64(tableName, "task_id")
	_projectTaskVisibilityUser.Userid = field.NewInt64(tableName, "userid")
	_projectTaskVisibilityUser.CreatedAt = field.NewTime(tableName, "created_at")
	_projectTaskVisibilityUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectTaskVisibilityUser.fillFieldMap()

	return _projectTaskVisibilityUser
}

type projectTaskVisibilityUser struct {
	projectTaskVisibilityUserDo

	ALL       field.Asterisk
	ID        field.Int64
	ProjectID field.Int64
	TaskID    field.Int64
	Userid    field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectTaskVisibilityUser) Table(newTableName string) *projectTaskVisibilityUser {
	p.projectTaskVisibilityUserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectTaskVisibilityUser) As(alias string) *projectTaskVisibilityUser {
	p.projectTaskVisibilityUserDo.DO = *(p.projectTaskVisibilityUserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectTaskVisibilityUser) updateTableName(table string) *projectTaskVisibilityUser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.TaskID = field.NewInt64(table, "task_id")
	p.Userid = field.NewInt64(table, "userid")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectTaskVisibilityUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectTaskVisibilityUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["task_id"] = p.TaskID
	p.fieldMap["userid"] = p.Userid
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectTaskVisibilityUser) clone(db *gorm.DB) projectTaskVisibilityUser {
	p.projectTaskVisibilityUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectTaskVisibilityUser) replaceDB(db *gorm.DB) projectTaskVisibilityUser {
	p.projectTaskVisibilityUserDo.ReplaceDB(db)
	return p
}

type projectTaskVisibilityUserDo struct{ gen.DO }

type IProjectTaskVisibilityUserDo interface {
	gen.SubQuery
	Debug() IProjectTaskVisibilityUserDo
	WithContext(ctx context.Context) IProjectTaskVisibilityUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectTaskVisibilityUserDo
	WriteDB() IProjectTaskVisibilityUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectTaskVisibilityUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectTaskVisibilityUserDo
	Not(conds ...gen.Condition) IProjectTaskVisibilityUserDo
	Or(conds ...gen.Condition) IProjectTaskVisibilityUserDo
	Select(conds ...field.Expr) IProjectTaskVisibilityUserDo
	Where(conds ...gen.Condition) IProjectTaskVisibilityUserDo
	Order(conds ...field.Expr) IProjectTaskVisibilityUserDo
	Distinct(cols ...field.Expr) IProjectTaskVisibilityUserDo
	Omit(cols ...field.Expr) IProjectTaskVisibilityUserDo
	Join(table schema.Tabler, on ...field.Expr) IProjectTaskVisibilityUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskVisibilityUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskVisibilityUserDo
	Group(cols ...field.Expr) IProjectTaskVisibilityUserDo
	Having(conds ...gen.Condition) IProjectTaskVisibilityUserDo
	Limit(limit int) IProjectTaskVisibilityUserDo
	Offset(offset int) IProjectTaskVisibilityUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskVisibilityUserDo
	Unscoped() IProjectTaskVisibilityUserDo
	Create(values ...*model.ProjectTaskVisibilityUser) error
	CreateInBatches(values []*model.ProjectTaskVisibilityUser, batchSize int) error
	Save(values ...*model.ProjectTaskVisibilityUser) error
	First() (*model.ProjectTaskVisibilityUser, error)
	Take() (*model.ProjectTaskVisibilityUser, error)
	Last() (*model.ProjectTaskVisibilityUser, error)
	Find() ([]*model.ProjectTaskVisibilityUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskVisibilityUser, err error)
	FindInBatches(result *[]*model.ProjectTaskVisibilityUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectTaskVisibilityUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectTaskVisibilityUserDo
	Assign(attrs ...field.AssignExpr) IProjectTaskVisibilityUserDo
	Joins(fields ...field.RelationField) IProjectTaskVisibilityUserDo
	Preload(fields ...field.RelationField) IProjectTaskVisibilityUserDo
	FirstOrInit() (*model.ProjectTaskVisibilityUser, error)
	FirstOrCreate() (*model.ProjectTaskVisibilityUser, error)
	FindByPage(offset int, limit int) (result []*model.ProjectTaskVisibilityUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectTaskVisibilityUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectTaskVisibilityUserDo) Debug() IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Debug())
}

func (p projectTaskVisibilityUserDo) WithContext(ctx context.Context) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectTaskVisibilityUserDo) ReadDB() IProjectTaskVisibilityUserDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectTaskVisibilityUserDo) WriteDB() IProjectTaskVisibilityUserDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectTaskVisibilityUserDo) Session(config *gorm.Session) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectTaskVisibilityUserDo) Clauses(conds ...clause.Expression) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectTaskVisibilityUserDo) Returning(value interface{}, columns ...string) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectTaskVisibilityUserDo) Not(conds ...gen.Condition) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectTaskVisibilityUserDo) Or(conds ...gen.Condition) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectTaskVisibilityUserDo) Select(conds ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectTaskVisibilityUserDo) Where(conds ...gen.Condition) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectTaskVisibilityUserDo) Order(conds ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectTaskVisibilityUserDo) Distinct(cols ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectTaskVisibilityUserDo) Omit(cols ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectTaskVisibilityUserDo) Join(table schema.Tabler, on ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectTaskVisibilityUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectTaskVisibilityUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectTaskVisibilityUserDo) Group(cols ...field.Expr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectTaskVisibilityUserDo) Having(conds ...gen.Condition) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectTaskVisibilityUserDo) Limit(limit int) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectTaskVisibilityUserDo) Offset(offset int) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectTaskVisibilityUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectTaskVisibilityUserDo) Unscoped() IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectTaskVisibilityUserDo) Create(values ...*model.ProjectTaskVisibilityUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectTaskVisibilityUserDo) CreateInBatches(values []*model.ProjectTaskVisibilityUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectTaskVisibilityUserDo) Save(values ...*model.ProjectTaskVisibilityUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectTaskVisibilityUserDo) First() (*model.ProjectTaskVisibilityUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskVisibilityUser), nil
	}
}

func (p projectTaskVisibilityUserDo) Take() (*model.ProjectTaskVisibilityUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskVisibilityUser), nil
	}
}

func (p projectTaskVisibilityUserDo) Last() (*model.ProjectTaskVisibilityUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskVisibilityUser), nil
	}
}

func (p projectTaskVisibilityUserDo) Find() ([]*model.ProjectTaskVisibilityUser, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectTaskVisibilityUser), err
}

func (p projectTaskVisibilityUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskVisibilityUser, err error) {
	buf := make([]*model.ProjectTaskVisibilityUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectTaskVisibilityUserDo) FindInBatches(result *[]*model.ProjectTaskVisibilityUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectTaskVisibilityUserDo) Attrs(attrs ...field.AssignExpr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectTaskVisibilityUserDo) Assign(attrs ...field.AssignExpr) IProjectTaskVisibilityUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectTaskVisibilityUserDo) Joins(fields ...field.RelationField) IProjectTaskVisibilityUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectTaskVisibilityUserDo) Preload(fields ...field.RelationField) IProjectTaskVisibilityUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectTaskVisibilityUserDo) FirstOrInit() (*model.ProjectTaskVisibilityUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskVisibilityUser), nil
	}
}

func (p projectTaskVisibilityUserDo) FirstOrCreate() (*model.ProjectTaskVisibilityUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskVisibilityUser), nil
	}
}

func (p projectTaskVisibilityUserDo) FindByPage(offset int, limit int) (result []*model.ProjectTaskVisibilityUser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectTaskVisibilityUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectTaskVisibilityUserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectTaskVisibilityUserDo) Delete(models ...*model.ProjectTaskVisibilityUser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectTaskVisibilityUserDo) withDO(do gen.Dao) *projectTaskVisibilityUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
