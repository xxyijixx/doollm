// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newHistoryChat(db *gorm.DB, opts ...gen.DOOption) historyChat {
	_historyChat := historyChat{}

	_historyChat.historyChatDo.UseDB(db, opts...)
	_historyChat.historyChatDo.UseModel(&model.HistoryChat{})

	tableName := _historyChat.historyChatDo.TableName()
	_historyChat.ALL = field.NewAsterisk(tableName)
	_historyChat.ID = field.NewInt64(tableName, "id")
	_historyChat.SessionID = field.NewString(tableName, "session_id")
	_historyChat.Model = field.NewString(tableName, "model")
	_historyChat.UserID = field.NewString(tableName, "user_id")
	_historyChat.LastMessages = field.NewString(tableName, "last_messages")
	_historyChat.CreateTime = field.NewString(tableName, "create_time")
	_historyChat.UpdateTime = field.NewString(tableName, "update_time")
	_historyChat.Avatar = field.NewString(tableName, "avatar")

	_historyChat.fillFieldMap()

	return _historyChat
}

type historyChat struct {
	historyChatDo historyChatDo

	ALL          field.Asterisk
	ID           field.Int64
	SessionID    field.String
	Model        field.String
	UserID       field.String
	LastMessages field.String
	CreateTime   field.String
	UpdateTime   field.String
	Avatar       field.String

	fieldMap map[string]field.Expr
}

func (h historyChat) Table(newTableName string) *historyChat {
	h.historyChatDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h historyChat) As(alias string) *historyChat {
	h.historyChatDo.DO = *(h.historyChatDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *historyChat) updateTableName(table string) *historyChat {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "id")
	h.SessionID = field.NewString(table, "session_id")
	h.Model = field.NewString(table, "model")
	h.UserID = field.NewString(table, "user_id")
	h.LastMessages = field.NewString(table, "last_messages")
	h.CreateTime = field.NewString(table, "create_time")
	h.UpdateTime = field.NewString(table, "update_time")
	h.Avatar = field.NewString(table, "avatar")

	h.fillFieldMap()

	return h
}

func (h *historyChat) WithContext(ctx context.Context) IHistoryChatDo {
	return h.historyChatDo.WithContext(ctx)
}

func (h historyChat) TableName() string { return h.historyChatDo.TableName() }

func (h historyChat) Alias() string { return h.historyChatDo.Alias() }

func (h historyChat) Columns(cols ...field.Expr) gen.Columns { return h.historyChatDo.Columns(cols...) }

func (h *historyChat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *historyChat) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 8)
	h.fieldMap["id"] = h.ID
	h.fieldMap["session_id"] = h.SessionID
	h.fieldMap["model"] = h.Model
	h.fieldMap["user_id"] = h.UserID
	h.fieldMap["last_messages"] = h.LastMessages
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["update_time"] = h.UpdateTime
	h.fieldMap["avatar"] = h.Avatar
}

func (h historyChat) clone(db *gorm.DB) historyChat {
	h.historyChatDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h historyChat) replaceDB(db *gorm.DB) historyChat {
	h.historyChatDo.ReplaceDB(db)
	return h
}

type historyChatDo struct{ gen.DO }

type IHistoryChatDo interface {
	gen.SubQuery
	Debug() IHistoryChatDo
	WithContext(ctx context.Context) IHistoryChatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHistoryChatDo
	WriteDB() IHistoryChatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHistoryChatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHistoryChatDo
	Not(conds ...gen.Condition) IHistoryChatDo
	Or(conds ...gen.Condition) IHistoryChatDo
	Select(conds ...field.Expr) IHistoryChatDo
	Where(conds ...gen.Condition) IHistoryChatDo
	Order(conds ...field.Expr) IHistoryChatDo
	Distinct(cols ...field.Expr) IHistoryChatDo
	Omit(cols ...field.Expr) IHistoryChatDo
	Join(table schema.Tabler, on ...field.Expr) IHistoryChatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHistoryChatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHistoryChatDo
	Group(cols ...field.Expr) IHistoryChatDo
	Having(conds ...gen.Condition) IHistoryChatDo
	Limit(limit int) IHistoryChatDo
	Offset(offset int) IHistoryChatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHistoryChatDo
	Unscoped() IHistoryChatDo
	Create(values ...*model.HistoryChat) error
	CreateInBatches(values []*model.HistoryChat, batchSize int) error
	Save(values ...*model.HistoryChat) error
	First() (*model.HistoryChat, error)
	Take() (*model.HistoryChat, error)
	Last() (*model.HistoryChat, error)
	Find() ([]*model.HistoryChat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HistoryChat, err error)
	FindInBatches(result *[]*model.HistoryChat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HistoryChat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHistoryChatDo
	Assign(attrs ...field.AssignExpr) IHistoryChatDo
	Joins(fields ...field.RelationField) IHistoryChatDo
	Preload(fields ...field.RelationField) IHistoryChatDo
	FirstOrInit() (*model.HistoryChat, error)
	FirstOrCreate() (*model.HistoryChat, error)
	FindByPage(offset int, limit int) (result []*model.HistoryChat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHistoryChatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h historyChatDo) Debug() IHistoryChatDo {
	return h.withDO(h.DO.Debug())
}

func (h historyChatDo) WithContext(ctx context.Context) IHistoryChatDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h historyChatDo) ReadDB() IHistoryChatDo {
	return h.Clauses(dbresolver.Read)
}

func (h historyChatDo) WriteDB() IHistoryChatDo {
	return h.Clauses(dbresolver.Write)
}

func (h historyChatDo) Session(config *gorm.Session) IHistoryChatDo {
	return h.withDO(h.DO.Session(config))
}

func (h historyChatDo) Clauses(conds ...clause.Expression) IHistoryChatDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h historyChatDo) Returning(value interface{}, columns ...string) IHistoryChatDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h historyChatDo) Not(conds ...gen.Condition) IHistoryChatDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h historyChatDo) Or(conds ...gen.Condition) IHistoryChatDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h historyChatDo) Select(conds ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h historyChatDo) Where(conds ...gen.Condition) IHistoryChatDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h historyChatDo) Order(conds ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h historyChatDo) Distinct(cols ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h historyChatDo) Omit(cols ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h historyChatDo) Join(table schema.Tabler, on ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h historyChatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h historyChatDo) RightJoin(table schema.Tabler, on ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h historyChatDo) Group(cols ...field.Expr) IHistoryChatDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h historyChatDo) Having(conds ...gen.Condition) IHistoryChatDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h historyChatDo) Limit(limit int) IHistoryChatDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h historyChatDo) Offset(offset int) IHistoryChatDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h historyChatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHistoryChatDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h historyChatDo) Unscoped() IHistoryChatDo {
	return h.withDO(h.DO.Unscoped())
}

func (h historyChatDo) Create(values ...*model.HistoryChat) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h historyChatDo) CreateInBatches(values []*model.HistoryChat, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h historyChatDo) Save(values ...*model.HistoryChat) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h historyChatDo) First() (*model.HistoryChat, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryChat), nil
	}
}

func (h historyChatDo) Take() (*model.HistoryChat, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryChat), nil
	}
}

func (h historyChatDo) Last() (*model.HistoryChat, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryChat), nil
	}
}

func (h historyChatDo) Find() ([]*model.HistoryChat, error) {
	result, err := h.DO.Find()
	return result.([]*model.HistoryChat), err
}

func (h historyChatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HistoryChat, err error) {
	buf := make([]*model.HistoryChat, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h historyChatDo) FindInBatches(result *[]*model.HistoryChat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h historyChatDo) Attrs(attrs ...field.AssignExpr) IHistoryChatDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h historyChatDo) Assign(attrs ...field.AssignExpr) IHistoryChatDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h historyChatDo) Joins(fields ...field.RelationField) IHistoryChatDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h historyChatDo) Preload(fields ...field.RelationField) IHistoryChatDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h historyChatDo) FirstOrInit() (*model.HistoryChat, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryChat), nil
	}
}

func (h historyChatDo) FirstOrCreate() (*model.HistoryChat, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryChat), nil
	}
}

func (h historyChatDo) FindByPage(offset int, limit int) (result []*model.HistoryChat, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h historyChatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h historyChatDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h historyChatDo) Delete(models ...*model.HistoryChat) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *historyChatDo) withDO(do gen.Dao) *historyChatDo {
	h.DO = *do.(*gen.DO)
	return h
}
