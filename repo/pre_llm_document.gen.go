// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newLlmDocument(db *gorm.DB, opts ...gen.DOOption) llmDocument {
	_llmDocument := llmDocument{}

	_llmDocument.llmDocumentDo.UseDB(db, opts...)
	_llmDocument.llmDocumentDo.UseModel(&model.LlmDocument{})

	tableName := _llmDocument.llmDocumentDo.TableName()
	_llmDocument.ALL = field.NewAsterisk(tableName)
	_llmDocument.ID = field.NewInt64(tableName, "id")
	_llmDocument.LinkType = field.NewString(tableName, "link_type")
	_llmDocument.LinkId = field.NewInt64(tableName, "link_id")
	_llmDocument.LinkParantId = field.NewInt64(tableName, "link_parant_id")
	_llmDocument.LinkExtras = field.NewString(tableName, "link_extras")
	_llmDocument.DocID = field.NewString(tableName, "doc_id")
	_llmDocument.Name = field.NewString(tableName, "name")
	_llmDocument.Title = field.NewString(tableName, "title")
	_llmDocument.Location = field.NewString(tableName, "location")
	_llmDocument.TokenCountEstimate = field.NewInt64(tableName, "token_count_estimate")
	_llmDocument.Userid = field.NewInt64(tableName, "userid")
	_llmDocument.LastModifiedAt = field.NewTime(tableName, "last_modified_at")
	_llmDocument.CreatedAt = field.NewTime(tableName, "created_at")
	_llmDocument.UpdatedAt = field.NewTime(tableName, "updated_at")

	_llmDocument.fillFieldMap()

	return _llmDocument
}

type llmDocument struct {
	llmDocumentDo llmDocumentDo

	ALL                field.Asterisk
	ID                 field.Int64
	LinkType           field.String
	LinkId             field.Int64
	LinkParantId       field.Int64
	LinkExtras         field.String
	DocID              field.String
	Name               field.String
	Title              field.String
	Location           field.String
	TokenCountEstimate field.Int64
	Userid             field.Int64
	LastModifiedAt     field.Time
	CreatedAt          field.Time
	UpdatedAt          field.Time

	fieldMap map[string]field.Expr
}

func (l llmDocument) Table(newTableName string) *llmDocument {
	l.llmDocumentDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l llmDocument) As(alias string) *llmDocument {
	l.llmDocumentDo.DO = *(l.llmDocumentDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *llmDocument) updateTableName(table string) *llmDocument {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.LinkType = field.NewString(table, "link_type")
	l.LinkId = field.NewInt64(table, "link_id")
	l.LinkParantId = field.NewInt64(table, "link_parant_id")
	l.LinkExtras = field.NewString(table, "link_extras")
	l.DocID = field.NewString(table, "doc_id")
	l.Name = field.NewString(table, "name")
	l.Title = field.NewString(table, "title")
	l.Location = field.NewString(table, "location")
	l.TokenCountEstimate = field.NewInt64(table, "token_count_estimate")
	l.Userid = field.NewInt64(table, "userid")
	l.LastModifiedAt = field.NewTime(table, "last_modified_at")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *llmDocument) WithContext(ctx context.Context) ILlmDocumentDo {
	return l.llmDocumentDo.WithContext(ctx)
}

func (l llmDocument) TableName() string { return l.llmDocumentDo.TableName() }

func (l llmDocument) Alias() string { return l.llmDocumentDo.Alias() }

func (l llmDocument) Columns(cols ...field.Expr) gen.Columns { return l.llmDocumentDo.Columns(cols...) }

func (l *llmDocument) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *llmDocument) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["link_type"] = l.LinkType
	l.fieldMap["link_id"] = l.LinkId
	l.fieldMap["link_parant_id"] = l.LinkParantId
	l.fieldMap["link_extras"] = l.LinkExtras
	l.fieldMap["doc_id"] = l.DocID
	l.fieldMap["name"] = l.Name
	l.fieldMap["title"] = l.Title
	l.fieldMap["location"] = l.Location
	l.fieldMap["token_count_estimate"] = l.TokenCountEstimate
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["last_modified_at"] = l.LastModifiedAt
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l llmDocument) clone(db *gorm.DB) llmDocument {
	l.llmDocumentDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l llmDocument) replaceDB(db *gorm.DB) llmDocument {
	l.llmDocumentDo.ReplaceDB(db)
	return l
}

type llmDocumentDo struct{ gen.DO }

type ILlmDocumentDo interface {
	gen.SubQuery
	Debug() ILlmDocumentDo
	WithContext(ctx context.Context) ILlmDocumentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILlmDocumentDo
	WriteDB() ILlmDocumentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILlmDocumentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILlmDocumentDo
	Not(conds ...gen.Condition) ILlmDocumentDo
	Or(conds ...gen.Condition) ILlmDocumentDo
	Select(conds ...field.Expr) ILlmDocumentDo
	Where(conds ...gen.Condition) ILlmDocumentDo
	Order(conds ...field.Expr) ILlmDocumentDo
	Distinct(cols ...field.Expr) ILlmDocumentDo
	Omit(cols ...field.Expr) ILlmDocumentDo
	Join(table schema.Tabler, on ...field.Expr) ILlmDocumentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILlmDocumentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILlmDocumentDo
	Group(cols ...field.Expr) ILlmDocumentDo
	Having(conds ...gen.Condition) ILlmDocumentDo
	Limit(limit int) ILlmDocumentDo
	Offset(offset int) ILlmDocumentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILlmDocumentDo
	Unscoped() ILlmDocumentDo
	Create(values ...*model.LlmDocument) error
	CreateInBatches(values []*model.LlmDocument, batchSize int) error
	Save(values ...*model.LlmDocument) error
	First() (*model.LlmDocument, error)
	Take() (*model.LlmDocument, error)
	Last() (*model.LlmDocument, error)
	Find() ([]*model.LlmDocument, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LlmDocument, err error)
	FindInBatches(result *[]*model.LlmDocument, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LlmDocument) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILlmDocumentDo
	Assign(attrs ...field.AssignExpr) ILlmDocumentDo
	Joins(fields ...field.RelationField) ILlmDocumentDo
	Preload(fields ...field.RelationField) ILlmDocumentDo
	FirstOrInit() (*model.LlmDocument, error)
	FirstOrCreate() (*model.LlmDocument, error)
	FindByPage(offset int, limit int) (result []*model.LlmDocument, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILlmDocumentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l llmDocumentDo) Debug() ILlmDocumentDo {
	return l.withDO(l.DO.Debug())
}

func (l llmDocumentDo) WithContext(ctx context.Context) ILlmDocumentDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l llmDocumentDo) ReadDB() ILlmDocumentDo {
	return l.Clauses(dbresolver.Read)
}

func (l llmDocumentDo) WriteDB() ILlmDocumentDo {
	return l.Clauses(dbresolver.Write)
}

func (l llmDocumentDo) Session(config *gorm.Session) ILlmDocumentDo {
	return l.withDO(l.DO.Session(config))
}

func (l llmDocumentDo) Clauses(conds ...clause.Expression) ILlmDocumentDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l llmDocumentDo) Returning(value interface{}, columns ...string) ILlmDocumentDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l llmDocumentDo) Not(conds ...gen.Condition) ILlmDocumentDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l llmDocumentDo) Or(conds ...gen.Condition) ILlmDocumentDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l llmDocumentDo) Select(conds ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l llmDocumentDo) Where(conds ...gen.Condition) ILlmDocumentDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l llmDocumentDo) Order(conds ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l llmDocumentDo) Distinct(cols ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l llmDocumentDo) Omit(cols ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l llmDocumentDo) Join(table schema.Tabler, on ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l llmDocumentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l llmDocumentDo) RightJoin(table schema.Tabler, on ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l llmDocumentDo) Group(cols ...field.Expr) ILlmDocumentDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l llmDocumentDo) Having(conds ...gen.Condition) ILlmDocumentDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l llmDocumentDo) Limit(limit int) ILlmDocumentDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l llmDocumentDo) Offset(offset int) ILlmDocumentDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l llmDocumentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILlmDocumentDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l llmDocumentDo) Unscoped() ILlmDocumentDo {
	return l.withDO(l.DO.Unscoped())
}

func (l llmDocumentDo) Create(values ...*model.LlmDocument) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l llmDocumentDo) CreateInBatches(values []*model.LlmDocument, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l llmDocumentDo) Save(values ...*model.LlmDocument) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l llmDocumentDo) First() (*model.LlmDocument, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmDocument), nil
	}
}

func (l llmDocumentDo) Take() (*model.LlmDocument, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmDocument), nil
	}
}

func (l llmDocumentDo) Last() (*model.LlmDocument, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmDocument), nil
	}
}

func (l llmDocumentDo) Find() ([]*model.LlmDocument, error) {
	result, err := l.DO.Find()
	return result.([]*model.LlmDocument), err
}

func (l llmDocumentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LlmDocument, err error) {
	buf := make([]*model.LlmDocument, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l llmDocumentDo) FindInBatches(result *[]*model.LlmDocument, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l llmDocumentDo) Attrs(attrs ...field.AssignExpr) ILlmDocumentDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l llmDocumentDo) Assign(attrs ...field.AssignExpr) ILlmDocumentDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l llmDocumentDo) Joins(fields ...field.RelationField) ILlmDocumentDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l llmDocumentDo) Preload(fields ...field.RelationField) ILlmDocumentDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l llmDocumentDo) FirstOrInit() (*model.LlmDocument, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmDocument), nil
	}
}

func (l llmDocumentDo) FirstOrCreate() (*model.LlmDocument, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmDocument), nil
	}
}

func (l llmDocumentDo) FindByPage(offset int, limit int) (result []*model.LlmDocument, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l llmDocumentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l llmDocumentDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l llmDocumentDo) Delete(models ...*model.LlmDocument) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *llmDocumentDo) withDO(do gen.Dao) *llmDocumentDo {
	l.DO = *do.(*gen.DO)
	return l
}
