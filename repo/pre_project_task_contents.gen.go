// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newProjectTaskContent(db *gorm.DB, opts ...gen.DOOption) projectTaskContent {
	_projectTaskContent := projectTaskContent{}

	_projectTaskContent.projectTaskContentDo.UseDB(db, opts...)
	_projectTaskContent.projectTaskContentDo.UseModel(&model.ProjectTaskContent{})

	tableName := _projectTaskContent.projectTaskContentDo.TableName()
	_projectTaskContent.ALL = field.NewAsterisk(tableName)
	_projectTaskContent.ID = field.NewInt64(tableName, "id")
	_projectTaskContent.ProjectID = field.NewInt64(tableName, "project_id")
	_projectTaskContent.TaskID = field.NewInt64(tableName, "task_id")
	_projectTaskContent.Userid = field.NewInt64(tableName, "userid")
	_projectTaskContent.Desc = field.NewString(tableName, "desc")
	_projectTaskContent.Content = field.NewString(tableName, "content")
	_projectTaskContent.CreatedAt = field.NewTime(tableName, "created_at")
	_projectTaskContent.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectTaskContent.fillFieldMap()

	return _projectTaskContent
}

type projectTaskContent struct {
	projectTaskContentDo projectTaskContentDo

	ALL       field.Asterisk
	ID        field.Int64
	ProjectID field.Int64
	TaskID    field.Int64
	Userid    field.Int64
	Desc      field.String
	Content   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectTaskContent) Table(newTableName string) *projectTaskContent {
	p.projectTaskContentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectTaskContent) As(alias string) *projectTaskContent {
	p.projectTaskContentDo.DO = *(p.projectTaskContentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectTaskContent) updateTableName(table string) *projectTaskContent {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.TaskID = field.NewInt64(table, "task_id")
	p.Userid = field.NewInt64(table, "userid")
	p.Desc = field.NewString(table, "desc")
	p.Content = field.NewString(table, "content")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectTaskContent) WithContext(ctx context.Context) IProjectTaskContentDo {
	return p.projectTaskContentDo.WithContext(ctx)
}

func (p projectTaskContent) TableName() string { return p.projectTaskContentDo.TableName() }

func (p projectTaskContent) Alias() string { return p.projectTaskContentDo.Alias() }

func (p projectTaskContent) Columns(cols ...field.Expr) gen.Columns {
	return p.projectTaskContentDo.Columns(cols...)
}

func (p *projectTaskContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectTaskContent) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["task_id"] = p.TaskID
	p.fieldMap["userid"] = p.Userid
	p.fieldMap["desc"] = p.Desc
	p.fieldMap["content"] = p.Content
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectTaskContent) clone(db *gorm.DB) projectTaskContent {
	p.projectTaskContentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectTaskContent) replaceDB(db *gorm.DB) projectTaskContent {
	p.projectTaskContentDo.ReplaceDB(db)
	return p
}

type projectTaskContentDo struct{ gen.DO }

type IProjectTaskContentDo interface {
	gen.SubQuery
	Debug() IProjectTaskContentDo
	WithContext(ctx context.Context) IProjectTaskContentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectTaskContentDo
	WriteDB() IProjectTaskContentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectTaskContentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectTaskContentDo
	Not(conds ...gen.Condition) IProjectTaskContentDo
	Or(conds ...gen.Condition) IProjectTaskContentDo
	Select(conds ...field.Expr) IProjectTaskContentDo
	Where(conds ...gen.Condition) IProjectTaskContentDo
	Order(conds ...field.Expr) IProjectTaskContentDo
	Distinct(cols ...field.Expr) IProjectTaskContentDo
	Omit(cols ...field.Expr) IProjectTaskContentDo
	Join(table schema.Tabler, on ...field.Expr) IProjectTaskContentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskContentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskContentDo
	Group(cols ...field.Expr) IProjectTaskContentDo
	Having(conds ...gen.Condition) IProjectTaskContentDo
	Limit(limit int) IProjectTaskContentDo
	Offset(offset int) IProjectTaskContentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskContentDo
	Unscoped() IProjectTaskContentDo
	Create(values ...*model.ProjectTaskContent) error
	CreateInBatches(values []*model.ProjectTaskContent, batchSize int) error
	Save(values ...*model.ProjectTaskContent) error
	First() (*model.ProjectTaskContent, error)
	Take() (*model.ProjectTaskContent, error)
	Last() (*model.ProjectTaskContent, error)
	Find() ([]*model.ProjectTaskContent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskContent, err error)
	FindInBatches(result *[]*model.ProjectTaskContent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectTaskContent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectTaskContentDo
	Assign(attrs ...field.AssignExpr) IProjectTaskContentDo
	Joins(fields ...field.RelationField) IProjectTaskContentDo
	Preload(fields ...field.RelationField) IProjectTaskContentDo
	FirstOrInit() (*model.ProjectTaskContent, error)
	FirstOrCreate() (*model.ProjectTaskContent, error)
	FindByPage(offset int, limit int) (result []*model.ProjectTaskContent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectTaskContentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectTaskContentDo) Debug() IProjectTaskContentDo {
	return p.withDO(p.DO.Debug())
}

func (p projectTaskContentDo) WithContext(ctx context.Context) IProjectTaskContentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectTaskContentDo) ReadDB() IProjectTaskContentDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectTaskContentDo) WriteDB() IProjectTaskContentDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectTaskContentDo) Session(config *gorm.Session) IProjectTaskContentDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectTaskContentDo) Clauses(conds ...clause.Expression) IProjectTaskContentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectTaskContentDo) Returning(value interface{}, columns ...string) IProjectTaskContentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectTaskContentDo) Not(conds ...gen.Condition) IProjectTaskContentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectTaskContentDo) Or(conds ...gen.Condition) IProjectTaskContentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectTaskContentDo) Select(conds ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectTaskContentDo) Where(conds ...gen.Condition) IProjectTaskContentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectTaskContentDo) Order(conds ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectTaskContentDo) Distinct(cols ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectTaskContentDo) Omit(cols ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectTaskContentDo) Join(table schema.Tabler, on ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectTaskContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectTaskContentDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectTaskContentDo) Group(cols ...field.Expr) IProjectTaskContentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectTaskContentDo) Having(conds ...gen.Condition) IProjectTaskContentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectTaskContentDo) Limit(limit int) IProjectTaskContentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectTaskContentDo) Offset(offset int) IProjectTaskContentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectTaskContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskContentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectTaskContentDo) Unscoped() IProjectTaskContentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectTaskContentDo) Create(values ...*model.ProjectTaskContent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectTaskContentDo) CreateInBatches(values []*model.ProjectTaskContent, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectTaskContentDo) Save(values ...*model.ProjectTaskContent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectTaskContentDo) First() (*model.ProjectTaskContent, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskContent), nil
	}
}

func (p projectTaskContentDo) Take() (*model.ProjectTaskContent, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskContent), nil
	}
}

func (p projectTaskContentDo) Last() (*model.ProjectTaskContent, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskContent), nil
	}
}

func (p projectTaskContentDo) Find() ([]*model.ProjectTaskContent, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectTaskContent), err
}

func (p projectTaskContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskContent, err error) {
	buf := make([]*model.ProjectTaskContent, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectTaskContentDo) FindInBatches(result *[]*model.ProjectTaskContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectTaskContentDo) Attrs(attrs ...field.AssignExpr) IProjectTaskContentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectTaskContentDo) Assign(attrs ...field.AssignExpr) IProjectTaskContentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectTaskContentDo) Joins(fields ...field.RelationField) IProjectTaskContentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectTaskContentDo) Preload(fields ...field.RelationField) IProjectTaskContentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectTaskContentDo) FirstOrInit() (*model.ProjectTaskContent, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskContent), nil
	}
}

func (p projectTaskContentDo) FirstOrCreate() (*model.ProjectTaskContent, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskContent), nil
	}
}

func (p projectTaskContentDo) FindByPage(offset int, limit int) (result []*model.ProjectTaskContent, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectTaskContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectTaskContentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectTaskContentDo) Delete(models ...*model.ProjectTaskContent) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectTaskContentDo) withDO(do gen.Dao) *projectTaskContentDo {
	p.DO = *do.(*gen.DO)
	return p
}
