// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newProjectFlow(db *gorm.DB, opts ...gen.DOOption) projectFlow {
	_projectFlow := projectFlow{}

	_projectFlow.projectFlowDo.UseDB(db, opts...)
	_projectFlow.projectFlowDo.UseModel(&model.ProjectFlow{})

	tableName := _projectFlow.projectFlowDo.TableName()
	_projectFlow.ALL = field.NewAsterisk(tableName)
	_projectFlow.ID = field.NewInt64(tableName, "id")
	_projectFlow.ProjectID = field.NewInt64(tableName, "project_id")
	_projectFlow.Name = field.NewString(tableName, "name")
	_projectFlow.CreatedAt = field.NewTime(tableName, "created_at")
	_projectFlow.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectFlow.fillFieldMap()

	return _projectFlow
}

type projectFlow struct {
	projectFlowDo projectFlowDo

	ALL       field.Asterisk
	ID        field.Int64
	ProjectID field.Int64
	Name      field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectFlow) Table(newTableName string) *projectFlow {
	p.projectFlowDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectFlow) As(alias string) *projectFlow {
	p.projectFlowDo.DO = *(p.projectFlowDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectFlow) updateTableName(table string) *projectFlow {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.Name = field.NewString(table, "name")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectFlow) WithContext(ctx context.Context) IProjectFlowDo {
	return p.projectFlowDo.WithContext(ctx)
}

func (p projectFlow) TableName() string { return p.projectFlowDo.TableName() }

func (p projectFlow) Alias() string { return p.projectFlowDo.Alias() }

func (p projectFlow) Columns(cols ...field.Expr) gen.Columns { return p.projectFlowDo.Columns(cols...) }

func (p *projectFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectFlow) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["name"] = p.Name
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectFlow) clone(db *gorm.DB) projectFlow {
	p.projectFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectFlow) replaceDB(db *gorm.DB) projectFlow {
	p.projectFlowDo.ReplaceDB(db)
	return p
}

type projectFlowDo struct{ gen.DO }

type IProjectFlowDo interface {
	gen.SubQuery
	Debug() IProjectFlowDo
	WithContext(ctx context.Context) IProjectFlowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectFlowDo
	WriteDB() IProjectFlowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectFlowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectFlowDo
	Not(conds ...gen.Condition) IProjectFlowDo
	Or(conds ...gen.Condition) IProjectFlowDo
	Select(conds ...field.Expr) IProjectFlowDo
	Where(conds ...gen.Condition) IProjectFlowDo
	Order(conds ...field.Expr) IProjectFlowDo
	Distinct(cols ...field.Expr) IProjectFlowDo
	Omit(cols ...field.Expr) IProjectFlowDo
	Join(table schema.Tabler, on ...field.Expr) IProjectFlowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectFlowDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectFlowDo
	Group(cols ...field.Expr) IProjectFlowDo
	Having(conds ...gen.Condition) IProjectFlowDo
	Limit(limit int) IProjectFlowDo
	Offset(offset int) IProjectFlowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectFlowDo
	Unscoped() IProjectFlowDo
	Create(values ...*model.ProjectFlow) error
	CreateInBatches(values []*model.ProjectFlow, batchSize int) error
	Save(values ...*model.ProjectFlow) error
	First() (*model.ProjectFlow, error)
	Take() (*model.ProjectFlow, error)
	Last() (*model.ProjectFlow, error)
	Find() ([]*model.ProjectFlow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectFlow, err error)
	FindInBatches(result *[]*model.ProjectFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectFlow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectFlowDo
	Assign(attrs ...field.AssignExpr) IProjectFlowDo
	Joins(fields ...field.RelationField) IProjectFlowDo
	Preload(fields ...field.RelationField) IProjectFlowDo
	FirstOrInit() (*model.ProjectFlow, error)
	FirstOrCreate() (*model.ProjectFlow, error)
	FindByPage(offset int, limit int) (result []*model.ProjectFlow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectFlowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectFlowDo) Debug() IProjectFlowDo {
	return p.withDO(p.DO.Debug())
}

func (p projectFlowDo) WithContext(ctx context.Context) IProjectFlowDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectFlowDo) ReadDB() IProjectFlowDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectFlowDo) WriteDB() IProjectFlowDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectFlowDo) Session(config *gorm.Session) IProjectFlowDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectFlowDo) Clauses(conds ...clause.Expression) IProjectFlowDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectFlowDo) Returning(value interface{}, columns ...string) IProjectFlowDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectFlowDo) Not(conds ...gen.Condition) IProjectFlowDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectFlowDo) Or(conds ...gen.Condition) IProjectFlowDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectFlowDo) Select(conds ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectFlowDo) Where(conds ...gen.Condition) IProjectFlowDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectFlowDo) Order(conds ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectFlowDo) Distinct(cols ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectFlowDo) Omit(cols ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectFlowDo) Join(table schema.Tabler, on ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectFlowDo) Group(cols ...field.Expr) IProjectFlowDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectFlowDo) Having(conds ...gen.Condition) IProjectFlowDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectFlowDo) Limit(limit int) IProjectFlowDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectFlowDo) Offset(offset int) IProjectFlowDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectFlowDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectFlowDo) Unscoped() IProjectFlowDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectFlowDo) Create(values ...*model.ProjectFlow) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectFlowDo) CreateInBatches(values []*model.ProjectFlow, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectFlowDo) Save(values ...*model.ProjectFlow) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectFlowDo) First() (*model.ProjectFlow, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlow), nil
	}
}

func (p projectFlowDo) Take() (*model.ProjectFlow, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlow), nil
	}
}

func (p projectFlowDo) Last() (*model.ProjectFlow, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlow), nil
	}
}

func (p projectFlowDo) Find() ([]*model.ProjectFlow, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectFlow), err
}

func (p projectFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectFlow, err error) {
	buf := make([]*model.ProjectFlow, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectFlowDo) FindInBatches(result *[]*model.ProjectFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectFlowDo) Attrs(attrs ...field.AssignExpr) IProjectFlowDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectFlowDo) Assign(attrs ...field.AssignExpr) IProjectFlowDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectFlowDo) Joins(fields ...field.RelationField) IProjectFlowDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectFlowDo) Preload(fields ...field.RelationField) IProjectFlowDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectFlowDo) FirstOrInit() (*model.ProjectFlow, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlow), nil
	}
}

func (p projectFlowDo) FirstOrCreate() (*model.ProjectFlow, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlow), nil
	}
}

func (p projectFlowDo) FindByPage(offset int, limit int) (result []*model.ProjectFlow, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectFlowDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectFlowDo) Delete(models ...*model.ProjectFlow) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectFlowDo) withDO(do gen.Dao) *projectFlowDo {
	p.DO = *do.(*gen.DO)
	return p
}
