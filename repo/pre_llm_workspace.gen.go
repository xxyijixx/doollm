// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newLlmWorkspace(db *gorm.DB, opts ...gen.DOOption) llmWorkspace {
	_llmWorkspace := llmWorkspace{}

	_llmWorkspace.llmWorkspaceDo.UseDB(db, opts...)
	_llmWorkspace.llmWorkspaceDo.UseModel(&model.LlmWorkspace{})

	tableName := _llmWorkspace.llmWorkspaceDo.TableName()
	_llmWorkspace.ALL = field.NewAsterisk(tableName)
	_llmWorkspace.ID = field.NewInt64(tableName, "id")
	_llmWorkspace.Userid = field.NewInt64(tableName, "userid")
	_llmWorkspace.Name = field.NewString(tableName, "name")
	_llmWorkspace.Slug = field.NewString(tableName, "slug")
	_llmWorkspace.CreatedAt = field.NewTime(tableName, "created_at")

	_llmWorkspace.fillFieldMap()

	return _llmWorkspace
}

type llmWorkspace struct {
	llmWorkspaceDo

	ALL       field.Asterisk
	ID        field.Int64
	Userid    field.Int64
	Name      field.String
	Slug      field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (l llmWorkspace) Table(newTableName string) *llmWorkspace {
	l.llmWorkspaceDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l llmWorkspace) As(alias string) *llmWorkspace {
	l.llmWorkspaceDo.DO = *(l.llmWorkspaceDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *llmWorkspace) updateTableName(table string) *llmWorkspace {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Userid = field.NewInt64(table, "userid")
	l.Name = field.NewString(table, "name")
	l.Slug = field.NewString(table, "slug")
	l.CreatedAt = field.NewTime(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *llmWorkspace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *llmWorkspace) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["id"] = l.ID
	l.fieldMap["userid"] = l.Userid
	l.fieldMap["name"] = l.Name
	l.fieldMap["slug"] = l.Slug
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l llmWorkspace) clone(db *gorm.DB) llmWorkspace {
	l.llmWorkspaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l llmWorkspace) replaceDB(db *gorm.DB) llmWorkspace {
	l.llmWorkspaceDo.ReplaceDB(db)
	return l
}

type llmWorkspaceDo struct{ gen.DO }

type ILlmWorkspaceDo interface {
	gen.SubQuery
	Debug() ILlmWorkspaceDo
	WithContext(ctx context.Context) ILlmWorkspaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILlmWorkspaceDo
	WriteDB() ILlmWorkspaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILlmWorkspaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILlmWorkspaceDo
	Not(conds ...gen.Condition) ILlmWorkspaceDo
	Or(conds ...gen.Condition) ILlmWorkspaceDo
	Select(conds ...field.Expr) ILlmWorkspaceDo
	Where(conds ...gen.Condition) ILlmWorkspaceDo
	Order(conds ...field.Expr) ILlmWorkspaceDo
	Distinct(cols ...field.Expr) ILlmWorkspaceDo
	Omit(cols ...field.Expr) ILlmWorkspaceDo
	Join(table schema.Tabler, on ...field.Expr) ILlmWorkspaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILlmWorkspaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILlmWorkspaceDo
	Group(cols ...field.Expr) ILlmWorkspaceDo
	Having(conds ...gen.Condition) ILlmWorkspaceDo
	Limit(limit int) ILlmWorkspaceDo
	Offset(offset int) ILlmWorkspaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILlmWorkspaceDo
	Unscoped() ILlmWorkspaceDo
	Create(values ...*model.LlmWorkspace) error
	CreateInBatches(values []*model.LlmWorkspace, batchSize int) error
	Save(values ...*model.LlmWorkspace) error
	First() (*model.LlmWorkspace, error)
	Take() (*model.LlmWorkspace, error)
	Last() (*model.LlmWorkspace, error)
	Find() ([]*model.LlmWorkspace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LlmWorkspace, err error)
	FindInBatches(result *[]*model.LlmWorkspace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LlmWorkspace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILlmWorkspaceDo
	Assign(attrs ...field.AssignExpr) ILlmWorkspaceDo
	Joins(fields ...field.RelationField) ILlmWorkspaceDo
	Preload(fields ...field.RelationField) ILlmWorkspaceDo
	FirstOrInit() (*model.LlmWorkspace, error)
	FirstOrCreate() (*model.LlmWorkspace, error)
	FindByPage(offset int, limit int) (result []*model.LlmWorkspace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILlmWorkspaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l llmWorkspaceDo) Debug() ILlmWorkspaceDo {
	return l.withDO(l.DO.Debug())
}

func (l llmWorkspaceDo) WithContext(ctx context.Context) ILlmWorkspaceDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l llmWorkspaceDo) ReadDB() ILlmWorkspaceDo {
	return l.Clauses(dbresolver.Read)
}

func (l llmWorkspaceDo) WriteDB() ILlmWorkspaceDo {
	return l.Clauses(dbresolver.Write)
}

func (l llmWorkspaceDo) Session(config *gorm.Session) ILlmWorkspaceDo {
	return l.withDO(l.DO.Session(config))
}

func (l llmWorkspaceDo) Clauses(conds ...clause.Expression) ILlmWorkspaceDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l llmWorkspaceDo) Returning(value interface{}, columns ...string) ILlmWorkspaceDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l llmWorkspaceDo) Not(conds ...gen.Condition) ILlmWorkspaceDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l llmWorkspaceDo) Or(conds ...gen.Condition) ILlmWorkspaceDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l llmWorkspaceDo) Select(conds ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l llmWorkspaceDo) Where(conds ...gen.Condition) ILlmWorkspaceDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l llmWorkspaceDo) Order(conds ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l llmWorkspaceDo) Distinct(cols ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l llmWorkspaceDo) Omit(cols ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l llmWorkspaceDo) Join(table schema.Tabler, on ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l llmWorkspaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l llmWorkspaceDo) RightJoin(table schema.Tabler, on ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l llmWorkspaceDo) Group(cols ...field.Expr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l llmWorkspaceDo) Having(conds ...gen.Condition) ILlmWorkspaceDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l llmWorkspaceDo) Limit(limit int) ILlmWorkspaceDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l llmWorkspaceDo) Offset(offset int) ILlmWorkspaceDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l llmWorkspaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILlmWorkspaceDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l llmWorkspaceDo) Unscoped() ILlmWorkspaceDo {
	return l.withDO(l.DO.Unscoped())
}

func (l llmWorkspaceDo) Create(values ...*model.LlmWorkspace) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l llmWorkspaceDo) CreateInBatches(values []*model.LlmWorkspace, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l llmWorkspaceDo) Save(values ...*model.LlmWorkspace) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l llmWorkspaceDo) First() (*model.LlmWorkspace, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmWorkspace), nil
	}
}

func (l llmWorkspaceDo) Take() (*model.LlmWorkspace, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmWorkspace), nil
	}
}

func (l llmWorkspaceDo) Last() (*model.LlmWorkspace, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmWorkspace), nil
	}
}

func (l llmWorkspaceDo) Find() ([]*model.LlmWorkspace, error) {
	result, err := l.DO.Find()
	return result.([]*model.LlmWorkspace), err
}

func (l llmWorkspaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LlmWorkspace, err error) {
	buf := make([]*model.LlmWorkspace, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l llmWorkspaceDo) FindInBatches(result *[]*model.LlmWorkspace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l llmWorkspaceDo) Attrs(attrs ...field.AssignExpr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l llmWorkspaceDo) Assign(attrs ...field.AssignExpr) ILlmWorkspaceDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l llmWorkspaceDo) Joins(fields ...field.RelationField) ILlmWorkspaceDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l llmWorkspaceDo) Preload(fields ...field.RelationField) ILlmWorkspaceDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l llmWorkspaceDo) FirstOrInit() (*model.LlmWorkspace, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmWorkspace), nil
	}
}

func (l llmWorkspaceDo) FirstOrCreate() (*model.LlmWorkspace, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LlmWorkspace), nil
	}
}

func (l llmWorkspaceDo) FindByPage(offset int, limit int) (result []*model.LlmWorkspace, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l llmWorkspaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l llmWorkspaceDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l llmWorkspaceDo) Delete(models ...*model.LlmWorkspace) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *llmWorkspaceDo) withDO(do gen.Dao) *llmWorkspaceDo {
	l.DO = *do.(*gen.DO)
	return l
}
