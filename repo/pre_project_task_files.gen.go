// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newProjectTaskFile(db *gorm.DB, opts ...gen.DOOption) projectTaskFile {
	_projectTaskFile := projectTaskFile{}

	_projectTaskFile.projectTaskFileDo.UseDB(db, opts...)
	_projectTaskFile.projectTaskFileDo.UseModel(&model.ProjectTaskFile{})

	tableName := _projectTaskFile.projectTaskFileDo.TableName()
	_projectTaskFile.ALL = field.NewAsterisk(tableName)
	_projectTaskFile.ID = field.NewInt64(tableName, "id")
	_projectTaskFile.ProjectID = field.NewInt64(tableName, "project_id")
	_projectTaskFile.TaskID = field.NewInt64(tableName, "task_id")
	_projectTaskFile.Name = field.NewString(tableName, "name")
	_projectTaskFile.Size = field.NewInt64(tableName, "size")
	_projectTaskFile.Ext = field.NewString(tableName, "ext")
	_projectTaskFile.Path = field.NewString(tableName, "path")
	_projectTaskFile.Thumb = field.NewString(tableName, "thumb")
	_projectTaskFile.Userid = field.NewInt64(tableName, "userid")
	_projectTaskFile.Download = field.NewInt32(tableName, "download")
	_projectTaskFile.CreatedAt = field.NewTime(tableName, "created_at")
	_projectTaskFile.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectTaskFile.fillFieldMap()

	return _projectTaskFile
}

type projectTaskFile struct {
	projectTaskFileDo

	ALL       field.Asterisk
	ID        field.Int64
	ProjectID field.Int64
	TaskID    field.Int64
	Name      field.String
	Size      field.Int64
	Ext       field.String
	Path      field.String
	Thumb     field.String
	Userid    field.Int64
	Download  field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectTaskFile) Table(newTableName string) *projectTaskFile {
	p.projectTaskFileDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectTaskFile) As(alias string) *projectTaskFile {
	p.projectTaskFileDo.DO = *(p.projectTaskFileDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectTaskFile) updateTableName(table string) *projectTaskFile {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.TaskID = field.NewInt64(table, "task_id")
	p.Name = field.NewString(table, "name")
	p.Size = field.NewInt64(table, "size")
	p.Ext = field.NewString(table, "ext")
	p.Path = field.NewString(table, "path")
	p.Thumb = field.NewString(table, "thumb")
	p.Userid = field.NewInt64(table, "userid")
	p.Download = field.NewInt32(table, "download")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectTaskFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectTaskFile) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["task_id"] = p.TaskID
	p.fieldMap["name"] = p.Name
	p.fieldMap["size"] = p.Size
	p.fieldMap["ext"] = p.Ext
	p.fieldMap["path"] = p.Path
	p.fieldMap["thumb"] = p.Thumb
	p.fieldMap["userid"] = p.Userid
	p.fieldMap["download"] = p.Download
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectTaskFile) clone(db *gorm.DB) projectTaskFile {
	p.projectTaskFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectTaskFile) replaceDB(db *gorm.DB) projectTaskFile {
	p.projectTaskFileDo.ReplaceDB(db)
	return p
}

type projectTaskFileDo struct{ gen.DO }

type IProjectTaskFileDo interface {
	gen.SubQuery
	Debug() IProjectTaskFileDo
	WithContext(ctx context.Context) IProjectTaskFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectTaskFileDo
	WriteDB() IProjectTaskFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectTaskFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectTaskFileDo
	Not(conds ...gen.Condition) IProjectTaskFileDo
	Or(conds ...gen.Condition) IProjectTaskFileDo
	Select(conds ...field.Expr) IProjectTaskFileDo
	Where(conds ...gen.Condition) IProjectTaskFileDo
	Order(conds ...field.Expr) IProjectTaskFileDo
	Distinct(cols ...field.Expr) IProjectTaskFileDo
	Omit(cols ...field.Expr) IProjectTaskFileDo
	Join(table schema.Tabler, on ...field.Expr) IProjectTaskFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskFileDo
	Group(cols ...field.Expr) IProjectTaskFileDo
	Having(conds ...gen.Condition) IProjectTaskFileDo
	Limit(limit int) IProjectTaskFileDo
	Offset(offset int) IProjectTaskFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskFileDo
	Unscoped() IProjectTaskFileDo
	Create(values ...*model.ProjectTaskFile) error
	CreateInBatches(values []*model.ProjectTaskFile, batchSize int) error
	Save(values ...*model.ProjectTaskFile) error
	First() (*model.ProjectTaskFile, error)
	Take() (*model.ProjectTaskFile, error)
	Last() (*model.ProjectTaskFile, error)
	Find() ([]*model.ProjectTaskFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskFile, err error)
	FindInBatches(result *[]*model.ProjectTaskFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectTaskFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectTaskFileDo
	Assign(attrs ...field.AssignExpr) IProjectTaskFileDo
	Joins(fields ...field.RelationField) IProjectTaskFileDo
	Preload(fields ...field.RelationField) IProjectTaskFileDo
	FirstOrInit() (*model.ProjectTaskFile, error)
	FirstOrCreate() (*model.ProjectTaskFile, error)
	FindByPage(offset int, limit int) (result []*model.ProjectTaskFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectTaskFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectTaskFileDo) Debug() IProjectTaskFileDo {
	return p.withDO(p.DO.Debug())
}

func (p projectTaskFileDo) WithContext(ctx context.Context) IProjectTaskFileDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectTaskFileDo) ReadDB() IProjectTaskFileDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectTaskFileDo) WriteDB() IProjectTaskFileDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectTaskFileDo) Session(config *gorm.Session) IProjectTaskFileDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectTaskFileDo) Clauses(conds ...clause.Expression) IProjectTaskFileDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectTaskFileDo) Returning(value interface{}, columns ...string) IProjectTaskFileDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectTaskFileDo) Not(conds ...gen.Condition) IProjectTaskFileDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectTaskFileDo) Or(conds ...gen.Condition) IProjectTaskFileDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectTaskFileDo) Select(conds ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectTaskFileDo) Where(conds ...gen.Condition) IProjectTaskFileDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectTaskFileDo) Order(conds ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectTaskFileDo) Distinct(cols ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectTaskFileDo) Omit(cols ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectTaskFileDo) Join(table schema.Tabler, on ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectTaskFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectTaskFileDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectTaskFileDo) Group(cols ...field.Expr) IProjectTaskFileDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectTaskFileDo) Having(conds ...gen.Condition) IProjectTaskFileDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectTaskFileDo) Limit(limit int) IProjectTaskFileDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectTaskFileDo) Offset(offset int) IProjectTaskFileDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectTaskFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskFileDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectTaskFileDo) Unscoped() IProjectTaskFileDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectTaskFileDo) Create(values ...*model.ProjectTaskFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectTaskFileDo) CreateInBatches(values []*model.ProjectTaskFile, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectTaskFileDo) Save(values ...*model.ProjectTaskFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectTaskFileDo) First() (*model.ProjectTaskFile, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskFile), nil
	}
}

func (p projectTaskFileDo) Take() (*model.ProjectTaskFile, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskFile), nil
	}
}

func (p projectTaskFileDo) Last() (*model.ProjectTaskFile, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskFile), nil
	}
}

func (p projectTaskFileDo) Find() ([]*model.ProjectTaskFile, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectTaskFile), err
}

func (p projectTaskFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskFile, err error) {
	buf := make([]*model.ProjectTaskFile, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectTaskFileDo) FindInBatches(result *[]*model.ProjectTaskFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectTaskFileDo) Attrs(attrs ...field.AssignExpr) IProjectTaskFileDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectTaskFileDo) Assign(attrs ...field.AssignExpr) IProjectTaskFileDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectTaskFileDo) Joins(fields ...field.RelationField) IProjectTaskFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectTaskFileDo) Preload(fields ...field.RelationField) IProjectTaskFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectTaskFileDo) FirstOrInit() (*model.ProjectTaskFile, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskFile), nil
	}
}

func (p projectTaskFileDo) FirstOrCreate() (*model.ProjectTaskFile, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskFile), nil
	}
}

func (p projectTaskFileDo) FindByPage(offset int, limit int) (result []*model.ProjectTaskFile, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectTaskFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectTaskFileDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectTaskFileDo) Delete(models ...*model.ProjectTaskFile) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectTaskFileDo) withDO(do gen.Dao) *projectTaskFileDo {
	p.DO = *do.(*gen.DO)
	return p
}
