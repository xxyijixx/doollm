// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                         = new(Query)
	File                      *file
	FileContent               *fileContent
	FileUser                  *fileUser
	LlmDocument               *llmDocument
	LlmWorkspace              *llmWorkspace
	LlmWorkspaceDocument      *llmWorkspaceDocument
	Project                   *project
	ProjectColumn             *projectColumn
	ProjectFlow               *projectFlow
	ProjectFlowItem           *projectFlowItem
	ProjectTask               *projectTask
	ProjectTaskContent        *projectTaskContent
	ProjectTaskFile           *projectTaskFile
	ProjectTaskUser           *projectTaskUser
	ProjectTaskVisibilityUser *projectTaskVisibilityUser
	ProjectUser               *projectUser
	Report                    *report
	ReportReceive             *reportReceive
	User                      *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	File = &Q.File
	FileContent = &Q.FileContent
	FileUser = &Q.FileUser
	LlmDocument = &Q.LlmDocument
	LlmWorkspace = &Q.LlmWorkspace
	LlmWorkspaceDocument = &Q.LlmWorkspaceDocument
	Project = &Q.Project
	ProjectColumn = &Q.ProjectColumn
	ProjectFlow = &Q.ProjectFlow
	ProjectFlowItem = &Q.ProjectFlowItem
	ProjectTask = &Q.ProjectTask
	ProjectTaskContent = &Q.ProjectTaskContent
	ProjectTaskFile = &Q.ProjectTaskFile
	ProjectTaskUser = &Q.ProjectTaskUser
	ProjectTaskVisibilityUser = &Q.ProjectTaskVisibilityUser
	ProjectUser = &Q.ProjectUser
	Report = &Q.Report
	ReportReceive = &Q.ReportReceive
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                        db,
		File:                      newFile(db, opts...),
		FileContent:               newFileContent(db, opts...),
		FileUser:                  newFileUser(db, opts...),
		LlmDocument:               newLlmDocument(db, opts...),
		LlmWorkspace:              newLlmWorkspace(db, opts...),
		LlmWorkspaceDocument:      newLlmWorkspaceDocument(db, opts...),
		Project:                   newProject(db, opts...),
		ProjectColumn:             newProjectColumn(db, opts...),
		ProjectFlow:               newProjectFlow(db, opts...),
		ProjectFlowItem:           newProjectFlowItem(db, opts...),
		ProjectTask:               newProjectTask(db, opts...),
		ProjectTaskContent:        newProjectTaskContent(db, opts...),
		ProjectTaskFile:           newProjectTaskFile(db, opts...),
		ProjectTaskUser:           newProjectTaskUser(db, opts...),
		ProjectTaskVisibilityUser: newProjectTaskVisibilityUser(db, opts...),
		ProjectUser:               newProjectUser(db, opts...),
		Report:                    newReport(db, opts...),
		ReportReceive:             newReportReceive(db, opts...),
		User:                      newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	File                      file
	FileContent               fileContent
	FileUser                  fileUser
	LlmDocument               llmDocument
	LlmWorkspace              llmWorkspace
	LlmWorkspaceDocument      llmWorkspaceDocument
	Project                   project
	ProjectColumn             projectColumn
	ProjectFlow               projectFlow
	ProjectFlowItem           projectFlowItem
	ProjectTask               projectTask
	ProjectTaskContent        projectTaskContent
	ProjectTaskFile           projectTaskFile
	ProjectTaskUser           projectTaskUser
	ProjectTaskVisibilityUser projectTaskVisibilityUser
	ProjectUser               projectUser
	Report                    report
	ReportReceive             reportReceive
	User                      user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		File:                      q.File.clone(db),
		FileContent:               q.FileContent.clone(db),
		FileUser:                  q.FileUser.clone(db),
		LlmDocument:               q.LlmDocument.clone(db),
		LlmWorkspace:              q.LlmWorkspace.clone(db),
		LlmWorkspaceDocument:      q.LlmWorkspaceDocument.clone(db),
		Project:                   q.Project.clone(db),
		ProjectColumn:             q.ProjectColumn.clone(db),
		ProjectFlow:               q.ProjectFlow.clone(db),
		ProjectFlowItem:           q.ProjectFlowItem.clone(db),
		ProjectTask:               q.ProjectTask.clone(db),
		ProjectTaskContent:        q.ProjectTaskContent.clone(db),
		ProjectTaskFile:           q.ProjectTaskFile.clone(db),
		ProjectTaskUser:           q.ProjectTaskUser.clone(db),
		ProjectTaskVisibilityUser: q.ProjectTaskVisibilityUser.clone(db),
		ProjectUser:               q.ProjectUser.clone(db),
		Report:                    q.Report.clone(db),
		ReportReceive:             q.ReportReceive.clone(db),
		User:                      q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		File:                      q.File.replaceDB(db),
		FileContent:               q.FileContent.replaceDB(db),
		FileUser:                  q.FileUser.replaceDB(db),
		LlmDocument:               q.LlmDocument.replaceDB(db),
		LlmWorkspace:              q.LlmWorkspace.replaceDB(db),
		LlmWorkspaceDocument:      q.LlmWorkspaceDocument.replaceDB(db),
		Project:                   q.Project.replaceDB(db),
		ProjectColumn:             q.ProjectColumn.replaceDB(db),
		ProjectFlow:               q.ProjectFlow.replaceDB(db),
		ProjectFlowItem:           q.ProjectFlowItem.replaceDB(db),
		ProjectTask:               q.ProjectTask.replaceDB(db),
		ProjectTaskContent:        q.ProjectTaskContent.replaceDB(db),
		ProjectTaskFile:           q.ProjectTaskFile.replaceDB(db),
		ProjectTaskUser:           q.ProjectTaskUser.replaceDB(db),
		ProjectTaskVisibilityUser: q.ProjectTaskVisibilityUser.replaceDB(db),
		ProjectUser:               q.ProjectUser.replaceDB(db),
		Report:                    q.Report.replaceDB(db),
		ReportReceive:             q.ReportReceive.replaceDB(db),
		User:                      q.User.replaceDB(db),
	}
}

type queryCtx struct {
	File                      IFileDo
	FileContent               IFileContentDo
	FileUser                  IFileUserDo
	LlmDocument               ILlmDocumentDo
	LlmWorkspace              ILlmWorkspaceDo
	LlmWorkspaceDocument      ILlmWorkspaceDocumentDo
	Project                   IProjectDo
	ProjectColumn             IProjectColumnDo
	ProjectFlow               IProjectFlowDo
	ProjectFlowItem           IProjectFlowItemDo
	ProjectTask               IProjectTaskDo
	ProjectTaskContent        IProjectTaskContentDo
	ProjectTaskFile           IProjectTaskFileDo
	ProjectTaskUser           IProjectTaskUserDo
	ProjectTaskVisibilityUser IProjectTaskVisibilityUserDo
	ProjectUser               IProjectUserDo
	Report                    IReportDo
	ReportReceive             IReportReceiveDo
	User                      IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		File:                      q.File.WithContext(ctx),
		FileContent:               q.FileContent.WithContext(ctx),
		FileUser:                  q.FileUser.WithContext(ctx),
		LlmDocument:               q.LlmDocument.WithContext(ctx),
		LlmWorkspace:              q.LlmWorkspace.WithContext(ctx),
		LlmWorkspaceDocument:      q.LlmWorkspaceDocument.WithContext(ctx),
		Project:                   q.Project.WithContext(ctx),
		ProjectColumn:             q.ProjectColumn.WithContext(ctx),
		ProjectFlow:               q.ProjectFlow.WithContext(ctx),
		ProjectFlowItem:           q.ProjectFlowItem.WithContext(ctx),
		ProjectTask:               q.ProjectTask.WithContext(ctx),
		ProjectTaskContent:        q.ProjectTaskContent.WithContext(ctx),
		ProjectTaskFile:           q.ProjectTaskFile.WithContext(ctx),
		ProjectTaskUser:           q.ProjectTaskUser.WithContext(ctx),
		ProjectTaskVisibilityUser: q.ProjectTaskVisibilityUser.WithContext(ctx),
		ProjectUser:               q.ProjectUser.WithContext(ctx),
		Report:                    q.Report.WithContext(ctx),
		ReportReceive:             q.ReportReceive.WithContext(ctx),
		User:                      q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
