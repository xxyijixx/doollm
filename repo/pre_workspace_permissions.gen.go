// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newWorkspacePermission(db *gorm.DB, opts ...gen.DOOption) workspacePermission {
	_workspacePermission := workspacePermission{}

	_workspacePermission.workspacePermissionDo.UseDB(db, opts...)
	_workspacePermission.workspacePermissionDo.UseModel(&model.WorkspacePermission{})

	tableName := _workspacePermission.workspacePermissionDo.TableName()
	_workspacePermission.ALL = field.NewAsterisk(tableName)
	_workspacePermission.ID = field.NewInt64(tableName, "id")
	_workspacePermission.UserID = field.NewInt64(tableName, "user_id")
	_workspacePermission.IsCreate = field.NewBool(tableName, "is_create")
	_workspacePermission.WorkspaceID = field.NewString(tableName, "workspace_id")
	_workspacePermission.CreateTime = field.NewTime(tableName, "create_time")
	_workspacePermission.UpdateTime = field.NewTime(tableName, "update_time")

	_workspacePermission.fillFieldMap()

	return _workspacePermission
}

type workspacePermission struct {
	workspacePermissionDo workspacePermissionDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64
	IsCreate    field.Bool
	WorkspaceID field.String
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (w workspacePermission) Table(newTableName string) *workspacePermission {
	w.workspacePermissionDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workspacePermission) As(alias string) *workspacePermission {
	w.workspacePermissionDo.DO = *(w.workspacePermissionDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workspacePermission) updateTableName(table string) *workspacePermission {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UserID = field.NewInt64(table, "user_id")
	w.IsCreate = field.NewBool(table, "is_create")
	w.WorkspaceID = field.NewString(table, "workspace_id")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")

	w.fillFieldMap()

	return w
}

func (w *workspacePermission) WithContext(ctx context.Context) IWorkspacePermissionDo {
	return w.workspacePermissionDo.WithContext(ctx)
}

func (w workspacePermission) TableName() string { return w.workspacePermissionDo.TableName() }

func (w workspacePermission) Alias() string { return w.workspacePermissionDo.Alias() }

func (w workspacePermission) Columns(cols ...field.Expr) gen.Columns {
	return w.workspacePermissionDo.Columns(cols...)
}

func (w *workspacePermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workspacePermission) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["is_create"] = w.IsCreate
	w.fieldMap["workspace_id"] = w.WorkspaceID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
}

func (w workspacePermission) clone(db *gorm.DB) workspacePermission {
	w.workspacePermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workspacePermission) replaceDB(db *gorm.DB) workspacePermission {
	w.workspacePermissionDo.ReplaceDB(db)
	return w
}

type workspacePermissionDo struct{ gen.DO }

type IWorkspacePermissionDo interface {
	gen.SubQuery
	Debug() IWorkspacePermissionDo
	WithContext(ctx context.Context) IWorkspacePermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkspacePermissionDo
	WriteDB() IWorkspacePermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkspacePermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkspacePermissionDo
	Not(conds ...gen.Condition) IWorkspacePermissionDo
	Or(conds ...gen.Condition) IWorkspacePermissionDo
	Select(conds ...field.Expr) IWorkspacePermissionDo
	Where(conds ...gen.Condition) IWorkspacePermissionDo
	Order(conds ...field.Expr) IWorkspacePermissionDo
	Distinct(cols ...field.Expr) IWorkspacePermissionDo
	Omit(cols ...field.Expr) IWorkspacePermissionDo
	Join(table schema.Tabler, on ...field.Expr) IWorkspacePermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspacePermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkspacePermissionDo
	Group(cols ...field.Expr) IWorkspacePermissionDo
	Having(conds ...gen.Condition) IWorkspacePermissionDo
	Limit(limit int) IWorkspacePermissionDo
	Offset(offset int) IWorkspacePermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspacePermissionDo
	Unscoped() IWorkspacePermissionDo
	Create(values ...*model.WorkspacePermission) error
	CreateInBatches(values []*model.WorkspacePermission, batchSize int) error
	Save(values ...*model.WorkspacePermission) error
	First() (*model.WorkspacePermission, error)
	Take() (*model.WorkspacePermission, error)
	Last() (*model.WorkspacePermission, error)
	Find() ([]*model.WorkspacePermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkspacePermission, err error)
	FindInBatches(result *[]*model.WorkspacePermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WorkspacePermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkspacePermissionDo
	Assign(attrs ...field.AssignExpr) IWorkspacePermissionDo
	Joins(fields ...field.RelationField) IWorkspacePermissionDo
	Preload(fields ...field.RelationField) IWorkspacePermissionDo
	FirstOrInit() (*model.WorkspacePermission, error)
	FirstOrCreate() (*model.WorkspacePermission, error)
	FindByPage(offset int, limit int) (result []*model.WorkspacePermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkspacePermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workspacePermissionDo) Debug() IWorkspacePermissionDo {
	return w.withDO(w.DO.Debug())
}

func (w workspacePermissionDo) WithContext(ctx context.Context) IWorkspacePermissionDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workspacePermissionDo) ReadDB() IWorkspacePermissionDo {
	return w.Clauses(dbresolver.Read)
}

func (w workspacePermissionDo) WriteDB() IWorkspacePermissionDo {
	return w.Clauses(dbresolver.Write)
}

func (w workspacePermissionDo) Session(config *gorm.Session) IWorkspacePermissionDo {
	return w.withDO(w.DO.Session(config))
}

func (w workspacePermissionDo) Clauses(conds ...clause.Expression) IWorkspacePermissionDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workspacePermissionDo) Returning(value interface{}, columns ...string) IWorkspacePermissionDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workspacePermissionDo) Not(conds ...gen.Condition) IWorkspacePermissionDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workspacePermissionDo) Or(conds ...gen.Condition) IWorkspacePermissionDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workspacePermissionDo) Select(conds ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workspacePermissionDo) Where(conds ...gen.Condition) IWorkspacePermissionDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workspacePermissionDo) Order(conds ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workspacePermissionDo) Distinct(cols ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workspacePermissionDo) Omit(cols ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workspacePermissionDo) Join(table schema.Tabler, on ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workspacePermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workspacePermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workspacePermissionDo) Group(cols ...field.Expr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workspacePermissionDo) Having(conds ...gen.Condition) IWorkspacePermissionDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workspacePermissionDo) Limit(limit int) IWorkspacePermissionDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workspacePermissionDo) Offset(offset int) IWorkspacePermissionDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workspacePermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspacePermissionDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workspacePermissionDo) Unscoped() IWorkspacePermissionDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workspacePermissionDo) Create(values ...*model.WorkspacePermission) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workspacePermissionDo) CreateInBatches(values []*model.WorkspacePermission, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workspacePermissionDo) Save(values ...*model.WorkspacePermission) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workspacePermissionDo) First() (*model.WorkspacePermission, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkspacePermission), nil
	}
}

func (w workspacePermissionDo) Take() (*model.WorkspacePermission, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkspacePermission), nil
	}
}

func (w workspacePermissionDo) Last() (*model.WorkspacePermission, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkspacePermission), nil
	}
}

func (w workspacePermissionDo) Find() ([]*model.WorkspacePermission, error) {
	result, err := w.DO.Find()
	return result.([]*model.WorkspacePermission), err
}

func (w workspacePermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkspacePermission, err error) {
	buf := make([]*model.WorkspacePermission, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workspacePermissionDo) FindInBatches(result *[]*model.WorkspacePermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workspacePermissionDo) Attrs(attrs ...field.AssignExpr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workspacePermissionDo) Assign(attrs ...field.AssignExpr) IWorkspacePermissionDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workspacePermissionDo) Joins(fields ...field.RelationField) IWorkspacePermissionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workspacePermissionDo) Preload(fields ...field.RelationField) IWorkspacePermissionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workspacePermissionDo) FirstOrInit() (*model.WorkspacePermission, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkspacePermission), nil
	}
}

func (w workspacePermissionDo) FirstOrCreate() (*model.WorkspacePermission, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkspacePermission), nil
	}
}

func (w workspacePermissionDo) FindByPage(offset int, limit int) (result []*model.WorkspacePermission, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workspacePermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workspacePermissionDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workspacePermissionDo) Delete(models ...*model.WorkspacePermission) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workspacePermissionDo) withDO(do gen.Dao) *workspacePermissionDo {
	w.DO = *do.(*gen.DO)
	return w
}
