// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newProjectFlowItem(db *gorm.DB, opts ...gen.DOOption) projectFlowItem {
	_projectFlowItem := projectFlowItem{}

	_projectFlowItem.projectFlowItemDo.UseDB(db, opts...)
	_projectFlowItem.projectFlowItemDo.UseModel(&model.ProjectFlowItem{})

	tableName := _projectFlowItem.projectFlowItemDo.TableName()
	_projectFlowItem.ALL = field.NewAsterisk(tableName)
	_projectFlowItem.ID = field.NewInt64(tableName, "id")
	_projectFlowItem.ProjectID = field.NewInt64(tableName, "project_id")
	_projectFlowItem.FlowID = field.NewInt64(tableName, "flow_id")
	_projectFlowItem.Name = field.NewString(tableName, "name")
	_projectFlowItem.Status = field.NewString(tableName, "status")
	_projectFlowItem.Turns = field.NewString(tableName, "turns")
	_projectFlowItem.Userids = field.NewString(tableName, "userids")
	_projectFlowItem.Usertype = field.NewString(tableName, "usertype")
	_projectFlowItem.Userlimit = field.NewInt32(tableName, "userlimit")
	_projectFlowItem.Columnid = field.NewInt64(tableName, "columnid")
	_projectFlowItem.Sort = field.NewInt32(tableName, "sort")
	_projectFlowItem.CreatedAt = field.NewTime(tableName, "created_at")
	_projectFlowItem.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectFlowItem.fillFieldMap()

	return _projectFlowItem
}

type projectFlowItem struct {
	projectFlowItemDo

	ALL       field.Asterisk
	ID        field.Int64
	ProjectID field.Int64
	FlowID    field.Int64
	Name      field.String
	Status    field.String
	Turns     field.String
	Userids   field.String
	Usertype  field.String
	Userlimit field.Int32
	Columnid  field.Int64
	Sort      field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectFlowItem) Table(newTableName string) *projectFlowItem {
	p.projectFlowItemDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectFlowItem) As(alias string) *projectFlowItem {
	p.projectFlowItemDo.DO = *(p.projectFlowItemDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectFlowItem) updateTableName(table string) *projectFlowItem {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.FlowID = field.NewInt64(table, "flow_id")
	p.Name = field.NewString(table, "name")
	p.Status = field.NewString(table, "status")
	p.Turns = field.NewString(table, "turns")
	p.Userids = field.NewString(table, "userids")
	p.Usertype = field.NewString(table, "usertype")
	p.Userlimit = field.NewInt32(table, "userlimit")
	p.Columnid = field.NewInt64(table, "columnid")
	p.Sort = field.NewInt32(table, "sort")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectFlowItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectFlowItem) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["flow_id"] = p.FlowID
	p.fieldMap["name"] = p.Name
	p.fieldMap["status"] = p.Status
	p.fieldMap["turns"] = p.Turns
	p.fieldMap["userids"] = p.Userids
	p.fieldMap["usertype"] = p.Usertype
	p.fieldMap["userlimit"] = p.Userlimit
	p.fieldMap["columnid"] = p.Columnid
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectFlowItem) clone(db *gorm.DB) projectFlowItem {
	p.projectFlowItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectFlowItem) replaceDB(db *gorm.DB) projectFlowItem {
	p.projectFlowItemDo.ReplaceDB(db)
	return p
}

type projectFlowItemDo struct{ gen.DO }

type IProjectFlowItemDo interface {
	gen.SubQuery
	Debug() IProjectFlowItemDo
	WithContext(ctx context.Context) IProjectFlowItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectFlowItemDo
	WriteDB() IProjectFlowItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectFlowItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectFlowItemDo
	Not(conds ...gen.Condition) IProjectFlowItemDo
	Or(conds ...gen.Condition) IProjectFlowItemDo
	Select(conds ...field.Expr) IProjectFlowItemDo
	Where(conds ...gen.Condition) IProjectFlowItemDo
	Order(conds ...field.Expr) IProjectFlowItemDo
	Distinct(cols ...field.Expr) IProjectFlowItemDo
	Omit(cols ...field.Expr) IProjectFlowItemDo
	Join(table schema.Tabler, on ...field.Expr) IProjectFlowItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectFlowItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectFlowItemDo
	Group(cols ...field.Expr) IProjectFlowItemDo
	Having(conds ...gen.Condition) IProjectFlowItemDo
	Limit(limit int) IProjectFlowItemDo
	Offset(offset int) IProjectFlowItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectFlowItemDo
	Unscoped() IProjectFlowItemDo
	Create(values ...*model.ProjectFlowItem) error
	CreateInBatches(values []*model.ProjectFlowItem, batchSize int) error
	Save(values ...*model.ProjectFlowItem) error
	First() (*model.ProjectFlowItem, error)
	Take() (*model.ProjectFlowItem, error)
	Last() (*model.ProjectFlowItem, error)
	Find() ([]*model.ProjectFlowItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectFlowItem, err error)
	FindInBatches(result *[]*model.ProjectFlowItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectFlowItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectFlowItemDo
	Assign(attrs ...field.AssignExpr) IProjectFlowItemDo
	Joins(fields ...field.RelationField) IProjectFlowItemDo
	Preload(fields ...field.RelationField) IProjectFlowItemDo
	FirstOrInit() (*model.ProjectFlowItem, error)
	FirstOrCreate() (*model.ProjectFlowItem, error)
	FindByPage(offset int, limit int) (result []*model.ProjectFlowItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectFlowItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectFlowItemDo) Debug() IProjectFlowItemDo {
	return p.withDO(p.DO.Debug())
}

func (p projectFlowItemDo) WithContext(ctx context.Context) IProjectFlowItemDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectFlowItemDo) ReadDB() IProjectFlowItemDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectFlowItemDo) WriteDB() IProjectFlowItemDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectFlowItemDo) Session(config *gorm.Session) IProjectFlowItemDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectFlowItemDo) Clauses(conds ...clause.Expression) IProjectFlowItemDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectFlowItemDo) Returning(value interface{}, columns ...string) IProjectFlowItemDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectFlowItemDo) Not(conds ...gen.Condition) IProjectFlowItemDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectFlowItemDo) Or(conds ...gen.Condition) IProjectFlowItemDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectFlowItemDo) Select(conds ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectFlowItemDo) Where(conds ...gen.Condition) IProjectFlowItemDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectFlowItemDo) Order(conds ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectFlowItemDo) Distinct(cols ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectFlowItemDo) Omit(cols ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectFlowItemDo) Join(table schema.Tabler, on ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectFlowItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectFlowItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectFlowItemDo) Group(cols ...field.Expr) IProjectFlowItemDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectFlowItemDo) Having(conds ...gen.Condition) IProjectFlowItemDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectFlowItemDo) Limit(limit int) IProjectFlowItemDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectFlowItemDo) Offset(offset int) IProjectFlowItemDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectFlowItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectFlowItemDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectFlowItemDo) Unscoped() IProjectFlowItemDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectFlowItemDo) Create(values ...*model.ProjectFlowItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectFlowItemDo) CreateInBatches(values []*model.ProjectFlowItem, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectFlowItemDo) Save(values ...*model.ProjectFlowItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectFlowItemDo) First() (*model.ProjectFlowItem, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlowItem), nil
	}
}

func (p projectFlowItemDo) Take() (*model.ProjectFlowItem, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlowItem), nil
	}
}

func (p projectFlowItemDo) Last() (*model.ProjectFlowItem, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlowItem), nil
	}
}

func (p projectFlowItemDo) Find() ([]*model.ProjectFlowItem, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectFlowItem), err
}

func (p projectFlowItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectFlowItem, err error) {
	buf := make([]*model.ProjectFlowItem, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectFlowItemDo) FindInBatches(result *[]*model.ProjectFlowItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectFlowItemDo) Attrs(attrs ...field.AssignExpr) IProjectFlowItemDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectFlowItemDo) Assign(attrs ...field.AssignExpr) IProjectFlowItemDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectFlowItemDo) Joins(fields ...field.RelationField) IProjectFlowItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectFlowItemDo) Preload(fields ...field.RelationField) IProjectFlowItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectFlowItemDo) FirstOrInit() (*model.ProjectFlowItem, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlowItem), nil
	}
}

func (p projectFlowItemDo) FirstOrCreate() (*model.ProjectFlowItem, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectFlowItem), nil
	}
}

func (p projectFlowItemDo) FindByPage(offset int, limit int) (result []*model.ProjectFlowItem, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectFlowItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectFlowItemDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectFlowItemDo) Delete(models ...*model.ProjectFlowItem) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectFlowItemDo) withDO(do gen.Dao) *projectFlowItemDo {
	p.DO = *do.(*gen.DO)
	return p
}
