// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newFileContent(db *gorm.DB, opts ...gen.DOOption) fileContent {
	_fileContent := fileContent{}

	_fileContent.fileContentDo.UseDB(db, opts...)
	_fileContent.fileContentDo.UseModel(&model.FileContent{})

	tableName := _fileContent.fileContentDo.TableName()
	_fileContent.ALL = field.NewAsterisk(tableName)
	_fileContent.ID = field.NewInt64(tableName, "id")
	_fileContent.Fid = field.NewInt64(tableName, "fid")
	_fileContent.Content = field.NewString(tableName, "content")
	_fileContent.Text = field.NewString(tableName, "text")
	_fileContent.Size = field.NewInt64(tableName, "size")
	_fileContent.Userid = field.NewInt64(tableName, "userid")
	_fileContent.CreatedAt = field.NewTime(tableName, "created_at")
	_fileContent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fileContent.DeletedAt = field.NewField(tableName, "deleted_at")

	_fileContent.fillFieldMap()

	return _fileContent
}

type fileContent struct {
	fileContentDo fileContentDo

	ALL       field.Asterisk
	ID        field.Int64
	Fid       field.Int64
	Content   field.String
	Text      field.String
	Size      field.Int64
	Userid    field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (f fileContent) Table(newTableName string) *fileContent {
	f.fileContentDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileContent) As(alias string) *fileContent {
	f.fileContentDo.DO = *(f.fileContentDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileContent) updateTableName(table string) *fileContent {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Fid = field.NewInt64(table, "fid")
	f.Content = field.NewString(table, "content")
	f.Text = field.NewString(table, "text")
	f.Size = field.NewInt64(table, "size")
	f.Userid = field.NewInt64(table, "userid")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *fileContent) WithContext(ctx context.Context) IFileContentDo {
	return f.fileContentDo.WithContext(ctx)
}

func (f fileContent) TableName() string { return f.fileContentDo.TableName() }

func (f fileContent) Alias() string { return f.fileContentDo.Alias() }

func (f fileContent) Columns(cols ...field.Expr) gen.Columns { return f.fileContentDo.Columns(cols...) }

func (f *fileContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileContent) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["fid"] = f.Fid
	f.fieldMap["content"] = f.Content
	f.fieldMap["text"] = f.Text
	f.fieldMap["size"] = f.Size
	f.fieldMap["userid"] = f.Userid
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f fileContent) clone(db *gorm.DB) fileContent {
	f.fileContentDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileContent) replaceDB(db *gorm.DB) fileContent {
	f.fileContentDo.ReplaceDB(db)
	return f
}

type fileContentDo struct{ gen.DO }

type IFileContentDo interface {
	gen.SubQuery
	Debug() IFileContentDo
	WithContext(ctx context.Context) IFileContentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileContentDo
	WriteDB() IFileContentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileContentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileContentDo
	Not(conds ...gen.Condition) IFileContentDo
	Or(conds ...gen.Condition) IFileContentDo
	Select(conds ...field.Expr) IFileContentDo
	Where(conds ...gen.Condition) IFileContentDo
	Order(conds ...field.Expr) IFileContentDo
	Distinct(cols ...field.Expr) IFileContentDo
	Omit(cols ...field.Expr) IFileContentDo
	Join(table schema.Tabler, on ...field.Expr) IFileContentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileContentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileContentDo
	Group(cols ...field.Expr) IFileContentDo
	Having(conds ...gen.Condition) IFileContentDo
	Limit(limit int) IFileContentDo
	Offset(offset int) IFileContentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileContentDo
	Unscoped() IFileContentDo
	Create(values ...*model.FileContent) error
	CreateInBatches(values []*model.FileContent, batchSize int) error
	Save(values ...*model.FileContent) error
	First() (*model.FileContent, error)
	Take() (*model.FileContent, error)
	Last() (*model.FileContent, error)
	Find() ([]*model.FileContent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileContent, err error)
	FindInBatches(result *[]*model.FileContent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileContent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileContentDo
	Assign(attrs ...field.AssignExpr) IFileContentDo
	Joins(fields ...field.RelationField) IFileContentDo
	Preload(fields ...field.RelationField) IFileContentDo
	FirstOrInit() (*model.FileContent, error)
	FirstOrCreate() (*model.FileContent, error)
	FindByPage(offset int, limit int) (result []*model.FileContent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileContentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileContentDo) Debug() IFileContentDo {
	return f.withDO(f.DO.Debug())
}

func (f fileContentDo) WithContext(ctx context.Context) IFileContentDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileContentDo) ReadDB() IFileContentDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileContentDo) WriteDB() IFileContentDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileContentDo) Session(config *gorm.Session) IFileContentDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileContentDo) Clauses(conds ...clause.Expression) IFileContentDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileContentDo) Returning(value interface{}, columns ...string) IFileContentDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileContentDo) Not(conds ...gen.Condition) IFileContentDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileContentDo) Or(conds ...gen.Condition) IFileContentDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileContentDo) Select(conds ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileContentDo) Where(conds ...gen.Condition) IFileContentDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileContentDo) Order(conds ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileContentDo) Distinct(cols ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileContentDo) Omit(cols ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileContentDo) Join(table schema.Tabler, on ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileContentDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileContentDo) Group(cols ...field.Expr) IFileContentDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileContentDo) Having(conds ...gen.Condition) IFileContentDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileContentDo) Limit(limit int) IFileContentDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileContentDo) Offset(offset int) IFileContentDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileContentDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileContentDo) Unscoped() IFileContentDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileContentDo) Create(values ...*model.FileContent) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileContentDo) CreateInBatches(values []*model.FileContent, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileContentDo) Save(values ...*model.FileContent) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileContentDo) First() (*model.FileContent, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileContent), nil
	}
}

func (f fileContentDo) Take() (*model.FileContent, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileContent), nil
	}
}

func (f fileContentDo) Last() (*model.FileContent, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileContent), nil
	}
}

func (f fileContentDo) Find() ([]*model.FileContent, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileContent), err
}

func (f fileContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileContent, err error) {
	buf := make([]*model.FileContent, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileContentDo) FindInBatches(result *[]*model.FileContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileContentDo) Attrs(attrs ...field.AssignExpr) IFileContentDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileContentDo) Assign(attrs ...field.AssignExpr) IFileContentDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileContentDo) Joins(fields ...field.RelationField) IFileContentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileContentDo) Preload(fields ...field.RelationField) IFileContentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileContentDo) FirstOrInit() (*model.FileContent, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileContent), nil
	}
}

func (f fileContentDo) FirstOrCreate() (*model.FileContent, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileContent), nil
	}
}

func (f fileContentDo) FindByPage(offset int, limit int) (result []*model.FileContent, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileContentDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileContentDo) Delete(models ...*model.FileContent) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileContentDo) withDO(do gen.Dao) *fileContentDo {
	f.DO = *do.(*gen.DO)
	return f
}
