// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newReportReceive(db *gorm.DB, opts ...gen.DOOption) reportReceive {
	_reportReceive := reportReceive{}

	_reportReceive.reportReceiveDo.UseDB(db, opts...)
	_reportReceive.reportReceiveDo.UseModel(&model.ReportReceive{})

	tableName := _reportReceive.reportReceiveDo.TableName()
	_reportReceive.ALL = field.NewAsterisk(tableName)
	_reportReceive.ID = field.NewInt64(tableName, "id")
	_reportReceive.Rid = field.NewInt64(tableName, "rid")
	_reportReceive.ReceiveTime = field.NewTime(tableName, "receive_time")
	_reportReceive.Userid = field.NewInt64(tableName, "userid")
	_reportReceive.Read = field.NewInt32(tableName, "read")

	_reportReceive.fillFieldMap()

	return _reportReceive
}

type reportReceive struct {
	reportReceiveDo reportReceiveDo

	ALL         field.Asterisk
	ID          field.Int64
	Rid         field.Int64
	ReceiveTime field.Time
	Userid      field.Int64
	Read        field.Int32

	fieldMap map[string]field.Expr
}

func (r reportReceive) Table(newTableName string) *reportReceive {
	r.reportReceiveDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportReceive) As(alias string) *reportReceive {
	r.reportReceiveDo.DO = *(r.reportReceiveDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportReceive) updateTableName(table string) *reportReceive {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Rid = field.NewInt64(table, "rid")
	r.ReceiveTime = field.NewTime(table, "receive_time")
	r.Userid = field.NewInt64(table, "userid")
	r.Read = field.NewInt32(table, "read")

	r.fillFieldMap()

	return r
}

func (r *reportReceive) WithContext(ctx context.Context) IReportReceiveDo {
	return r.reportReceiveDo.WithContext(ctx)
}

func (r reportReceive) TableName() string { return r.reportReceiveDo.TableName() }

func (r reportReceive) Alias() string { return r.reportReceiveDo.Alias() }

func (r reportReceive) Columns(cols ...field.Expr) gen.Columns {
	return r.reportReceiveDo.Columns(cols...)
}

func (r *reportReceive) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportReceive) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["rid"] = r.Rid
	r.fieldMap["receive_time"] = r.ReceiveTime
	r.fieldMap["userid"] = r.Userid
	r.fieldMap["read"] = r.Read
}

func (r reportReceive) clone(db *gorm.DB) reportReceive {
	r.reportReceiveDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportReceive) replaceDB(db *gorm.DB) reportReceive {
	r.reportReceiveDo.ReplaceDB(db)
	return r
}

type reportReceiveDo struct{ gen.DO }

type IReportReceiveDo interface {
	gen.SubQuery
	Debug() IReportReceiveDo
	WithContext(ctx context.Context) IReportReceiveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReportReceiveDo
	WriteDB() IReportReceiveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReportReceiveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReportReceiveDo
	Not(conds ...gen.Condition) IReportReceiveDo
	Or(conds ...gen.Condition) IReportReceiveDo
	Select(conds ...field.Expr) IReportReceiveDo
	Where(conds ...gen.Condition) IReportReceiveDo
	Order(conds ...field.Expr) IReportReceiveDo
	Distinct(cols ...field.Expr) IReportReceiveDo
	Omit(cols ...field.Expr) IReportReceiveDo
	Join(table schema.Tabler, on ...field.Expr) IReportReceiveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReportReceiveDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReportReceiveDo
	Group(cols ...field.Expr) IReportReceiveDo
	Having(conds ...gen.Condition) IReportReceiveDo
	Limit(limit int) IReportReceiveDo
	Offset(offset int) IReportReceiveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReportReceiveDo
	Unscoped() IReportReceiveDo
	Create(values ...*model.ReportReceive) error
	CreateInBatches(values []*model.ReportReceive, batchSize int) error
	Save(values ...*model.ReportReceive) error
	First() (*model.ReportReceive, error)
	Take() (*model.ReportReceive, error)
	Last() (*model.ReportReceive, error)
	Find() ([]*model.ReportReceive, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportReceive, err error)
	FindInBatches(result *[]*model.ReportReceive, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReportReceive) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReportReceiveDo
	Assign(attrs ...field.AssignExpr) IReportReceiveDo
	Joins(fields ...field.RelationField) IReportReceiveDo
	Preload(fields ...field.RelationField) IReportReceiveDo
	FirstOrInit() (*model.ReportReceive, error)
	FirstOrCreate() (*model.ReportReceive, error)
	FindByPage(offset int, limit int) (result []*model.ReportReceive, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReportReceiveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reportReceiveDo) Debug() IReportReceiveDo {
	return r.withDO(r.DO.Debug())
}

func (r reportReceiveDo) WithContext(ctx context.Context) IReportReceiveDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportReceiveDo) ReadDB() IReportReceiveDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportReceiveDo) WriteDB() IReportReceiveDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportReceiveDo) Session(config *gorm.Session) IReportReceiveDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportReceiveDo) Clauses(conds ...clause.Expression) IReportReceiveDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportReceiveDo) Returning(value interface{}, columns ...string) IReportReceiveDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportReceiveDo) Not(conds ...gen.Condition) IReportReceiveDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportReceiveDo) Or(conds ...gen.Condition) IReportReceiveDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportReceiveDo) Select(conds ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportReceiveDo) Where(conds ...gen.Condition) IReportReceiveDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportReceiveDo) Order(conds ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportReceiveDo) Distinct(cols ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportReceiveDo) Omit(cols ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportReceiveDo) Join(table schema.Tabler, on ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportReceiveDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportReceiveDo) RightJoin(table schema.Tabler, on ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportReceiveDo) Group(cols ...field.Expr) IReportReceiveDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportReceiveDo) Having(conds ...gen.Condition) IReportReceiveDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportReceiveDo) Limit(limit int) IReportReceiveDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportReceiveDo) Offset(offset int) IReportReceiveDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportReceiveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReportReceiveDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportReceiveDo) Unscoped() IReportReceiveDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportReceiveDo) Create(values ...*model.ReportReceive) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportReceiveDo) CreateInBatches(values []*model.ReportReceive, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportReceiveDo) Save(values ...*model.ReportReceive) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportReceiveDo) First() (*model.ReportReceive, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceive), nil
	}
}

func (r reportReceiveDo) Take() (*model.ReportReceive, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceive), nil
	}
}

func (r reportReceiveDo) Last() (*model.ReportReceive, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceive), nil
	}
}

func (r reportReceiveDo) Find() ([]*model.ReportReceive, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportReceive), err
}

func (r reportReceiveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportReceive, err error) {
	buf := make([]*model.ReportReceive, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportReceiveDo) FindInBatches(result *[]*model.ReportReceive, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportReceiveDo) Attrs(attrs ...field.AssignExpr) IReportReceiveDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportReceiveDo) Assign(attrs ...field.AssignExpr) IReportReceiveDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportReceiveDo) Joins(fields ...field.RelationField) IReportReceiveDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportReceiveDo) Preload(fields ...field.RelationField) IReportReceiveDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportReceiveDo) FirstOrInit() (*model.ReportReceive, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceive), nil
	}
}

func (r reportReceiveDo) FirstOrCreate() (*model.ReportReceive, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceive), nil
	}
}

func (r reportReceiveDo) FindByPage(offset int, limit int) (result []*model.ReportReceive, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportReceiveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportReceiveDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportReceiveDo) Delete(models ...*model.ReportReceive) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportReceiveDo) withDO(do gen.Dao) *reportReceiveDo {
	r.DO = *do.(*gen.DO)
	return r
}
