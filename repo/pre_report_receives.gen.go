// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newReportReceife(db *gorm.DB, opts ...gen.DOOption) reportReceife {
	_reportReceife := reportReceife{}

	_reportReceife.reportReceifeDo.UseDB(db, opts...)
	_reportReceife.reportReceifeDo.UseModel(&model.ReportReceife{})

	tableName := _reportReceife.reportReceifeDo.TableName()
	_reportReceife.ALL = field.NewAsterisk(tableName)
	_reportReceife.ID = field.NewInt64(tableName, "id")
	_reportReceife.Rid = field.NewInt32(tableName, "rid")
	_reportReceife.ReceiveTime = field.NewTime(tableName, "receive_time")
	_reportReceife.Userid = field.NewInt64(tableName, "userid")
	_reportReceife.Read = field.NewInt32(tableName, "read")

	_reportReceife.fillFieldMap()

	return _reportReceife
}

type reportReceife struct {
	reportReceifeDo reportReceifeDo

	ALL         field.Asterisk
	ID          field.Int64
	Rid         field.Int32
	ReceiveTime field.Time
	Userid      field.Int64
	Read        field.Int32

	fieldMap map[string]field.Expr
}

func (r reportReceife) Table(newTableName string) *reportReceife {
	r.reportReceifeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportReceife) As(alias string) *reportReceife {
	r.reportReceifeDo.DO = *(r.reportReceifeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportReceife) updateTableName(table string) *reportReceife {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Rid = field.NewInt32(table, "rid")
	r.ReceiveTime = field.NewTime(table, "receive_time")
	r.Userid = field.NewInt64(table, "userid")
	r.Read = field.NewInt32(table, "read")

	r.fillFieldMap()

	return r
}

func (r *reportReceife) WithContext(ctx context.Context) IReportReceifeDo {
	return r.reportReceifeDo.WithContext(ctx)
}

func (r reportReceife) TableName() string { return r.reportReceifeDo.TableName() }

func (r reportReceife) Alias() string { return r.reportReceifeDo.Alias() }

func (r reportReceife) Columns(cols ...field.Expr) gen.Columns {
	return r.reportReceifeDo.Columns(cols...)
}

func (r *reportReceife) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportReceife) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["rid"] = r.Rid
	r.fieldMap["receive_time"] = r.ReceiveTime
	r.fieldMap["userid"] = r.Userid
	r.fieldMap["read"] = r.Read
}

func (r reportReceife) clone(db *gorm.DB) reportReceife {
	r.reportReceifeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportReceife) replaceDB(db *gorm.DB) reportReceife {
	r.reportReceifeDo.ReplaceDB(db)
	return r
}

type reportReceifeDo struct{ gen.DO }

type IReportReceifeDo interface {
	gen.SubQuery
	Debug() IReportReceifeDo
	WithContext(ctx context.Context) IReportReceifeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReportReceifeDo
	WriteDB() IReportReceifeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReportReceifeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReportReceifeDo
	Not(conds ...gen.Condition) IReportReceifeDo
	Or(conds ...gen.Condition) IReportReceifeDo
	Select(conds ...field.Expr) IReportReceifeDo
	Where(conds ...gen.Condition) IReportReceifeDo
	Order(conds ...field.Expr) IReportReceifeDo
	Distinct(cols ...field.Expr) IReportReceifeDo
	Omit(cols ...field.Expr) IReportReceifeDo
	Join(table schema.Tabler, on ...field.Expr) IReportReceifeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReportReceifeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReportReceifeDo
	Group(cols ...field.Expr) IReportReceifeDo
	Having(conds ...gen.Condition) IReportReceifeDo
	Limit(limit int) IReportReceifeDo
	Offset(offset int) IReportReceifeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReportReceifeDo
	Unscoped() IReportReceifeDo
	Create(values ...*model.ReportReceife) error
	CreateInBatches(values []*model.ReportReceife, batchSize int) error
	Save(values ...*model.ReportReceife) error
	First() (*model.ReportReceife, error)
	Take() (*model.ReportReceife, error)
	Last() (*model.ReportReceife, error)
	Find() ([]*model.ReportReceife, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportReceife, err error)
	FindInBatches(result *[]*model.ReportReceife, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReportReceife) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReportReceifeDo
	Assign(attrs ...field.AssignExpr) IReportReceifeDo
	Joins(fields ...field.RelationField) IReportReceifeDo
	Preload(fields ...field.RelationField) IReportReceifeDo
	FirstOrInit() (*model.ReportReceife, error)
	FirstOrCreate() (*model.ReportReceife, error)
	FindByPage(offset int, limit int) (result []*model.ReportReceife, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReportReceifeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reportReceifeDo) Debug() IReportReceifeDo {
	return r.withDO(r.DO.Debug())
}

func (r reportReceifeDo) WithContext(ctx context.Context) IReportReceifeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportReceifeDo) ReadDB() IReportReceifeDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportReceifeDo) WriteDB() IReportReceifeDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportReceifeDo) Session(config *gorm.Session) IReportReceifeDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportReceifeDo) Clauses(conds ...clause.Expression) IReportReceifeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportReceifeDo) Returning(value interface{}, columns ...string) IReportReceifeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportReceifeDo) Not(conds ...gen.Condition) IReportReceifeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportReceifeDo) Or(conds ...gen.Condition) IReportReceifeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportReceifeDo) Select(conds ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportReceifeDo) Where(conds ...gen.Condition) IReportReceifeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportReceifeDo) Order(conds ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportReceifeDo) Distinct(cols ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportReceifeDo) Omit(cols ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportReceifeDo) Join(table schema.Tabler, on ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportReceifeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportReceifeDo) RightJoin(table schema.Tabler, on ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportReceifeDo) Group(cols ...field.Expr) IReportReceifeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportReceifeDo) Having(conds ...gen.Condition) IReportReceifeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportReceifeDo) Limit(limit int) IReportReceifeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportReceifeDo) Offset(offset int) IReportReceifeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportReceifeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReportReceifeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportReceifeDo) Unscoped() IReportReceifeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportReceifeDo) Create(values ...*model.ReportReceife) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportReceifeDo) CreateInBatches(values []*model.ReportReceife, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportReceifeDo) Save(values ...*model.ReportReceife) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportReceifeDo) First() (*model.ReportReceife, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceife), nil
	}
}

func (r reportReceifeDo) Take() (*model.ReportReceife, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceife), nil
	}
}

func (r reportReceifeDo) Last() (*model.ReportReceife, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceife), nil
	}
}

func (r reportReceifeDo) Find() ([]*model.ReportReceife, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportReceife), err
}

func (r reportReceifeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportReceife, err error) {
	buf := make([]*model.ReportReceife, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportReceifeDo) FindInBatches(result *[]*model.ReportReceife, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportReceifeDo) Attrs(attrs ...field.AssignExpr) IReportReceifeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportReceifeDo) Assign(attrs ...field.AssignExpr) IReportReceifeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportReceifeDo) Joins(fields ...field.RelationField) IReportReceifeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportReceifeDo) Preload(fields ...field.RelationField) IReportReceifeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportReceifeDo) FirstOrInit() (*model.ReportReceife, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceife), nil
	}
}

func (r reportReceifeDo) FirstOrCreate() (*model.ReportReceife, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportReceife), nil
	}
}

func (r reportReceifeDo) FindByPage(offset int, limit int) (result []*model.ReportReceife, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportReceifeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportReceifeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportReceifeDo) Delete(models ...*model.ReportReceife) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportReceifeDo) withDO(do gen.Dao) *reportReceifeDo {
	r.DO = *do.(*gen.DO)
	return r
}
