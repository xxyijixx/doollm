// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newProjectTaskUser(db *gorm.DB, opts ...gen.DOOption) projectTaskUser {
	_projectTaskUser := projectTaskUser{}

	_projectTaskUser.projectTaskUserDo.UseDB(db, opts...)
	_projectTaskUser.projectTaskUserDo.UseModel(&model.ProjectTaskUser{})

	tableName := _projectTaskUser.projectTaskUserDo.TableName()
	_projectTaskUser.ALL = field.NewAsterisk(tableName)
	_projectTaskUser.ID = field.NewInt64(tableName, "id")
	_projectTaskUser.ProjectID = field.NewInt64(tableName, "project_id")
	_projectTaskUser.TaskID = field.NewInt64(tableName, "task_id")
	_projectTaskUser.TaskPid = field.NewInt64(tableName, "task_pid")
	_projectTaskUser.Userid = field.NewInt64(tableName, "userid")
	_projectTaskUser.Owner = field.NewInt32(tableName, "owner")
	_projectTaskUser.CreatedAt = field.NewTime(tableName, "created_at")
	_projectTaskUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectTaskUser.fillFieldMap()

	return _projectTaskUser
}

type projectTaskUser struct {
	projectTaskUserDo projectTaskUserDo

	ALL       field.Asterisk
	ID        field.Int64
	ProjectID field.Int64
	TaskID    field.Int64
	TaskPid   field.Int64
	Userid    field.Int64
	Owner     field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectTaskUser) Table(newTableName string) *projectTaskUser {
	p.projectTaskUserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectTaskUser) As(alias string) *projectTaskUser {
	p.projectTaskUserDo.DO = *(p.projectTaskUserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectTaskUser) updateTableName(table string) *projectTaskUser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.ProjectID = field.NewInt64(table, "project_id")
	p.TaskID = field.NewInt64(table, "task_id")
	p.TaskPid = field.NewInt64(table, "task_pid")
	p.Userid = field.NewInt64(table, "userid")
	p.Owner = field.NewInt32(table, "owner")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectTaskUser) WithContext(ctx context.Context) IProjectTaskUserDo {
	return p.projectTaskUserDo.WithContext(ctx)
}

func (p projectTaskUser) TableName() string { return p.projectTaskUserDo.TableName() }

func (p projectTaskUser) Alias() string { return p.projectTaskUserDo.Alias() }

func (p projectTaskUser) Columns(cols ...field.Expr) gen.Columns {
	return p.projectTaskUserDo.Columns(cols...)
}

func (p *projectTaskUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectTaskUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["task_id"] = p.TaskID
	p.fieldMap["task_pid"] = p.TaskPid
	p.fieldMap["userid"] = p.Userid
	p.fieldMap["owner"] = p.Owner
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectTaskUser) clone(db *gorm.DB) projectTaskUser {
	p.projectTaskUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectTaskUser) replaceDB(db *gorm.DB) projectTaskUser {
	p.projectTaskUserDo.ReplaceDB(db)
	return p
}

type projectTaskUserDo struct{ gen.DO }

type IProjectTaskUserDo interface {
	gen.SubQuery
	Debug() IProjectTaskUserDo
	WithContext(ctx context.Context) IProjectTaskUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectTaskUserDo
	WriteDB() IProjectTaskUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectTaskUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectTaskUserDo
	Not(conds ...gen.Condition) IProjectTaskUserDo
	Or(conds ...gen.Condition) IProjectTaskUserDo
	Select(conds ...field.Expr) IProjectTaskUserDo
	Where(conds ...gen.Condition) IProjectTaskUserDo
	Order(conds ...field.Expr) IProjectTaskUserDo
	Distinct(cols ...field.Expr) IProjectTaskUserDo
	Omit(cols ...field.Expr) IProjectTaskUserDo
	Join(table schema.Tabler, on ...field.Expr) IProjectTaskUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskUserDo
	Group(cols ...field.Expr) IProjectTaskUserDo
	Having(conds ...gen.Condition) IProjectTaskUserDo
	Limit(limit int) IProjectTaskUserDo
	Offset(offset int) IProjectTaskUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskUserDo
	Unscoped() IProjectTaskUserDo
	Create(values ...*model.ProjectTaskUser) error
	CreateInBatches(values []*model.ProjectTaskUser, batchSize int) error
	Save(values ...*model.ProjectTaskUser) error
	First() (*model.ProjectTaskUser, error)
	Take() (*model.ProjectTaskUser, error)
	Last() (*model.ProjectTaskUser, error)
	Find() ([]*model.ProjectTaskUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskUser, err error)
	FindInBatches(result *[]*model.ProjectTaskUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectTaskUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectTaskUserDo
	Assign(attrs ...field.AssignExpr) IProjectTaskUserDo
	Joins(fields ...field.RelationField) IProjectTaskUserDo
	Preload(fields ...field.RelationField) IProjectTaskUserDo
	FirstOrInit() (*model.ProjectTaskUser, error)
	FirstOrCreate() (*model.ProjectTaskUser, error)
	FindByPage(offset int, limit int) (result []*model.ProjectTaskUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectTaskUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectTaskUserDo) Debug() IProjectTaskUserDo {
	return p.withDO(p.DO.Debug())
}

func (p projectTaskUserDo) WithContext(ctx context.Context) IProjectTaskUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectTaskUserDo) ReadDB() IProjectTaskUserDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectTaskUserDo) WriteDB() IProjectTaskUserDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectTaskUserDo) Session(config *gorm.Session) IProjectTaskUserDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectTaskUserDo) Clauses(conds ...clause.Expression) IProjectTaskUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectTaskUserDo) Returning(value interface{}, columns ...string) IProjectTaskUserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectTaskUserDo) Not(conds ...gen.Condition) IProjectTaskUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectTaskUserDo) Or(conds ...gen.Condition) IProjectTaskUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectTaskUserDo) Select(conds ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectTaskUserDo) Where(conds ...gen.Condition) IProjectTaskUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectTaskUserDo) Order(conds ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectTaskUserDo) Distinct(cols ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectTaskUserDo) Omit(cols ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectTaskUserDo) Join(table schema.Tabler, on ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectTaskUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectTaskUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectTaskUserDo) Group(cols ...field.Expr) IProjectTaskUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectTaskUserDo) Having(conds ...gen.Condition) IProjectTaskUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectTaskUserDo) Limit(limit int) IProjectTaskUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectTaskUserDo) Offset(offset int) IProjectTaskUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectTaskUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTaskUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectTaskUserDo) Unscoped() IProjectTaskUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectTaskUserDo) Create(values ...*model.ProjectTaskUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectTaskUserDo) CreateInBatches(values []*model.ProjectTaskUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectTaskUserDo) Save(values ...*model.ProjectTaskUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectTaskUserDo) First() (*model.ProjectTaskUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskUser), nil
	}
}

func (p projectTaskUserDo) Take() (*model.ProjectTaskUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskUser), nil
	}
}

func (p projectTaskUserDo) Last() (*model.ProjectTaskUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskUser), nil
	}
}

func (p projectTaskUserDo) Find() ([]*model.ProjectTaskUser, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectTaskUser), err
}

func (p projectTaskUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTaskUser, err error) {
	buf := make([]*model.ProjectTaskUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectTaskUserDo) FindInBatches(result *[]*model.ProjectTaskUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectTaskUserDo) Attrs(attrs ...field.AssignExpr) IProjectTaskUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectTaskUserDo) Assign(attrs ...field.AssignExpr) IProjectTaskUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectTaskUserDo) Joins(fields ...field.RelationField) IProjectTaskUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectTaskUserDo) Preload(fields ...field.RelationField) IProjectTaskUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectTaskUserDo) FirstOrInit() (*model.ProjectTaskUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskUser), nil
	}
}

func (p projectTaskUserDo) FirstOrCreate() (*model.ProjectTaskUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTaskUser), nil
	}
}

func (p projectTaskUserDo) FindByPage(offset int, limit int) (result []*model.ProjectTaskUser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectTaskUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectTaskUserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectTaskUserDo) Delete(models ...*model.ProjectTaskUser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectTaskUserDo) withDO(do gen.Dao) *projectTaskUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
