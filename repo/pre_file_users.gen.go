// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doollm/repo/model"
)

func newFileUser(db *gorm.DB, opts ...gen.DOOption) fileUser {
	_fileUser := fileUser{}

	_fileUser.fileUserDo.UseDB(db, opts...)
	_fileUser.fileUserDo.UseModel(&model.FileUser{})

	tableName := _fileUser.fileUserDo.TableName()
	_fileUser.ALL = field.NewAsterisk(tableName)
	_fileUser.ID = field.NewInt64(tableName, "id")
	_fileUser.FileID = field.NewInt64(tableName, "file_id")
	_fileUser.Userid = field.NewInt64(tableName, "userid")
	_fileUser.Permission = field.NewInt32(tableName, "permission")
	_fileUser.CreatedAt = field.NewTime(tableName, "created_at")
	_fileUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fileUser.fillFieldMap()

	return _fileUser
}

type fileUser struct {
	fileUserDo

	ALL        field.Asterisk
	ID         field.Int64
	FileID     field.Int64
	Userid     field.Int64
	Permission field.Int32
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (f fileUser) Table(newTableName string) *fileUser {
	f.fileUserDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileUser) As(alias string) *fileUser {
	f.fileUserDo.DO = *(f.fileUserDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileUser) updateTableName(table string) *fileUser {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FileID = field.NewInt64(table, "file_id")
	f.Userid = field.NewInt64(table, "userid")
	f.Permission = field.NewInt32(table, "permission")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fileUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileUser) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["file_id"] = f.FileID
	f.fieldMap["userid"] = f.Userid
	f.fieldMap["permission"] = f.Permission
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fileUser) clone(db *gorm.DB) fileUser {
	f.fileUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileUser) replaceDB(db *gorm.DB) fileUser {
	f.fileUserDo.ReplaceDB(db)
	return f
}

type fileUserDo struct{ gen.DO }

type IFileUserDo interface {
	gen.SubQuery
	Debug() IFileUserDo
	WithContext(ctx context.Context) IFileUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileUserDo
	WriteDB() IFileUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileUserDo
	Not(conds ...gen.Condition) IFileUserDo
	Or(conds ...gen.Condition) IFileUserDo
	Select(conds ...field.Expr) IFileUserDo
	Where(conds ...gen.Condition) IFileUserDo
	Order(conds ...field.Expr) IFileUserDo
	Distinct(cols ...field.Expr) IFileUserDo
	Omit(cols ...field.Expr) IFileUserDo
	Join(table schema.Tabler, on ...field.Expr) IFileUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileUserDo
	Group(cols ...field.Expr) IFileUserDo
	Having(conds ...gen.Condition) IFileUserDo
	Limit(limit int) IFileUserDo
	Offset(offset int) IFileUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileUserDo
	Unscoped() IFileUserDo
	Create(values ...*model.FileUser) error
	CreateInBatches(values []*model.FileUser, batchSize int) error
	Save(values ...*model.FileUser) error
	First() (*model.FileUser, error)
	Take() (*model.FileUser, error)
	Last() (*model.FileUser, error)
	Find() ([]*model.FileUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileUser, err error)
	FindInBatches(result *[]*model.FileUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileUserDo
	Assign(attrs ...field.AssignExpr) IFileUserDo
	Joins(fields ...field.RelationField) IFileUserDo
	Preload(fields ...field.RelationField) IFileUserDo
	FirstOrInit() (*model.FileUser, error)
	FirstOrCreate() (*model.FileUser, error)
	FindByPage(offset int, limit int) (result []*model.FileUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileUserDo) Debug() IFileUserDo {
	return f.withDO(f.DO.Debug())
}

func (f fileUserDo) WithContext(ctx context.Context) IFileUserDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileUserDo) ReadDB() IFileUserDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileUserDo) WriteDB() IFileUserDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileUserDo) Session(config *gorm.Session) IFileUserDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileUserDo) Clauses(conds ...clause.Expression) IFileUserDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileUserDo) Returning(value interface{}, columns ...string) IFileUserDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileUserDo) Not(conds ...gen.Condition) IFileUserDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileUserDo) Or(conds ...gen.Condition) IFileUserDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileUserDo) Select(conds ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileUserDo) Where(conds ...gen.Condition) IFileUserDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileUserDo) Order(conds ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileUserDo) Distinct(cols ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileUserDo) Omit(cols ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileUserDo) Join(table schema.Tabler, on ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileUserDo) Group(cols ...field.Expr) IFileUserDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileUserDo) Having(conds ...gen.Condition) IFileUserDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileUserDo) Limit(limit int) IFileUserDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileUserDo) Offset(offset int) IFileUserDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileUserDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileUserDo) Unscoped() IFileUserDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileUserDo) Create(values ...*model.FileUser) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileUserDo) CreateInBatches(values []*model.FileUser, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileUserDo) Save(values ...*model.FileUser) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileUserDo) First() (*model.FileUser, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileUser), nil
	}
}

func (f fileUserDo) Take() (*model.FileUser, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileUser), nil
	}
}

func (f fileUserDo) Last() (*model.FileUser, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileUser), nil
	}
}

func (f fileUserDo) Find() ([]*model.FileUser, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileUser), err
}

func (f fileUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileUser, err error) {
	buf := make([]*model.FileUser, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileUserDo) FindInBatches(result *[]*model.FileUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileUserDo) Attrs(attrs ...field.AssignExpr) IFileUserDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileUserDo) Assign(attrs ...field.AssignExpr) IFileUserDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileUserDo) Joins(fields ...field.RelationField) IFileUserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileUserDo) Preload(fields ...field.RelationField) IFileUserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileUserDo) FirstOrInit() (*model.FileUser, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileUser), nil
	}
}

func (f fileUserDo) FirstOrCreate() (*model.FileUser, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileUser), nil
	}
}

func (f fileUserDo) FindByPage(offset int, limit int) (result []*model.FileUser, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileUserDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileUserDo) Delete(models ...*model.FileUser) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileUserDo) withDO(do gen.Dao) *fileUserDo {
	f.DO = *do.(*gen.DO)
	return f
}
